<?php
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';

include_once $GLOBALS['THRIFT_ROOT'].'/packages/commsuite/commsuite_types.php';

interface CommSuiteIf {
  public function messagePreviewForPriority($sessionid, $messageid, $jobpriority);
  public function messageViewForJobPerson($sessionid, $messageid, $jobid, $personid);
}

class CommSuiteClient implements CommSuiteIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function messagePreviewForPriority($sessionid, $messageid, $jobpriority)
  {
    $this->send_messagePreviewForPriority($sessionid, $messageid, $jobpriority);
    return $this->recv_messagePreviewForPriority();
  }

  public function send_messagePreviewForPriority($sessionid, $messageid, $jobpriority)
  {
    $args = new commsuite_CommSuite_messagePreviewForPriority_args();
    $args->sessionid = $sessionid;
    $args->messageid = $messageid;
    $args->jobpriority = $jobpriority;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'messagePreviewForPriority', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('messagePreviewForPriority', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_messagePreviewForPriority()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'commsuite_CommSuite_messagePreviewForPriority_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new commsuite_CommSuite_messagePreviewForPriority_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("messagePreviewForPriority failed: unknown result");
  }

  public function messageViewForJobPerson($sessionid, $messageid, $jobid, $personid)
  {
    $this->send_messageViewForJobPerson($sessionid, $messageid, $jobid, $personid);
    return $this->recv_messageViewForJobPerson();
  }

  public function send_messageViewForJobPerson($sessionid, $messageid, $jobid, $personid)
  {
    $args = new commsuite_CommSuite_messageViewForJobPerson_args();
    $args->sessionid = $sessionid;
    $args->messageid = $messageid;
    $args->jobid = $jobid;
    $args->personid = $personid;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'messageViewForJobPerson', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('messageViewForJobPerson', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_messageViewForJobPerson()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'commsuite_CommSuite_messageViewForJobPerson_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new commsuite_CommSuite_messageViewForJobPerson_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("messageViewForJobPerson failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class commsuite_CommSuite_messagePreviewForPriority_args {
  static $_TSPEC;

  public $sessionid = null;
  public $messageid = null;
  public $jobpriority = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sessionid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'messageid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'jobpriority',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sessionid'])) {
        $this->sessionid = $vals['sessionid'];
      }
      if (isset($vals['messageid'])) {
        $this->messageid = $vals['messageid'];
      }
      if (isset($vals['jobpriority'])) {
        $this->jobpriority = $vals['jobpriority'];
      }
    }
  }

  public function getName() {
    return 'CommSuite_messagePreviewForPriority_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sessionid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->messageid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->jobpriority);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommSuite_messagePreviewForPriority_args');
    if ($this->sessionid !== null) {
      $xfer += $output->writeFieldBegin('sessionid', TType::STRING, 1);
      $xfer += $output->writeString($this->sessionid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->messageid !== null) {
      $xfer += $output->writeFieldBegin('messageid', TType::I32, 2);
      $xfer += $output->writeI32($this->messageid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jobpriority !== null) {
      $xfer += $output->writeFieldBegin('jobpriority', TType::I32, 3);
      $xfer += $output->writeI32($this->jobpriority);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class commsuite_CommSuite_messagePreviewForPriority_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'commsuite_MessageView',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CommSuite_messagePreviewForPriority_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new commsuite_MessageView();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommSuite_messagePreviewForPriority_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class commsuite_CommSuite_messageViewForJobPerson_args {
  static $_TSPEC;

  public $sessionid = null;
  public $messageid = null;
  public $jobid = null;
  public $personid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sessionid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'messageid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'jobid',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'personid',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sessionid'])) {
        $this->sessionid = $vals['sessionid'];
      }
      if (isset($vals['messageid'])) {
        $this->messageid = $vals['messageid'];
      }
      if (isset($vals['jobid'])) {
        $this->jobid = $vals['jobid'];
      }
      if (isset($vals['personid'])) {
        $this->personid = $vals['personid'];
      }
    }
  }

  public function getName() {
    return 'CommSuite_messageViewForJobPerson_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sessionid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->messageid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->jobid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->personid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommSuite_messageViewForJobPerson_args');
    if ($this->sessionid !== null) {
      $xfer += $output->writeFieldBegin('sessionid', TType::STRING, 1);
      $xfer += $output->writeString($this->sessionid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->messageid !== null) {
      $xfer += $output->writeFieldBegin('messageid', TType::I32, 2);
      $xfer += $output->writeI32($this->messageid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jobid !== null) {
      $xfer += $output->writeFieldBegin('jobid', TType::I32, 3);
      $xfer += $output->writeI32($this->jobid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->personid !== null) {
      $xfer += $output->writeFieldBegin('personid', TType::I32, 4);
      $xfer += $output->writeI32($this->personid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class commsuite_CommSuite_messageViewForJobPerson_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'commsuite_MessageView',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'CommSuite_messageViewForJobPerson_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new commsuite_MessageView();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommSuite_messageViewForJobPerson_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
