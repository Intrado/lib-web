<?php
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';

include_once $GLOBALS['THRIFT_ROOT'].'/packages/commsuite/commsuite_types.php';

interface CommSuiteIf {
  public function emailMessagePreviewForPriority($sessionid, $messageid, $jobpriority);
  public function emailMessageViewForJobPerson($sessionid, $messageid, $jobid, $personid);
  public function emailMessageViewForMessageParts($sessionid, $message, $parts, $jobpriority);
  public function audioFileGetForFormat($sessionid, $contentid, $format);
  public function ttsGetForTextLanguageGenderFormat($text, $language, $gender, $format);
  public function phoneMessageGetMp3AudioFile($sessionid, $parts);
}

class CommSuiteClient implements CommSuiteIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function emailMessagePreviewForPriority($sessionid, $messageid, $jobpriority)
  {
    $this->send_emailMessagePreviewForPriority($sessionid, $messageid, $jobpriority);
    return $this->recv_emailMessagePreviewForPriority();
  }

  public function send_emailMessagePreviewForPriority($sessionid, $messageid, $jobpriority)
  {
    $args = new commsuite_CommSuite_emailMessagePreviewForPriority_args();
    $args->sessionid = $sessionid;
    $args->messageid = $messageid;
    $args->jobpriority = $jobpriority;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'emailMessagePreviewForPriority', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('emailMessagePreviewForPriority', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_emailMessagePreviewForPriority()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'commsuite_CommSuite_emailMessagePreviewForPriority_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new commsuite_CommSuite_emailMessagePreviewForPriority_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sie !== null) {
      throw $result->sie;
    }
    throw new Exception("emailMessagePreviewForPriority failed: unknown result");
  }

  public function emailMessageViewForJobPerson($sessionid, $messageid, $jobid, $personid)
  {
    $this->send_emailMessageViewForJobPerson($sessionid, $messageid, $jobid, $personid);
    return $this->recv_emailMessageViewForJobPerson();
  }

  public function send_emailMessageViewForJobPerson($sessionid, $messageid, $jobid, $personid)
  {
    $args = new commsuite_CommSuite_emailMessageViewForJobPerson_args();
    $args->sessionid = $sessionid;
    $args->messageid = $messageid;
    $args->jobid = $jobid;
    $args->personid = $personid;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'emailMessageViewForJobPerson', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('emailMessageViewForJobPerson', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_emailMessageViewForJobPerson()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'commsuite_CommSuite_emailMessageViewForJobPerson_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new commsuite_CommSuite_emailMessageViewForJobPerson_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sie !== null) {
      throw $result->sie;
    }
    throw new Exception("emailMessageViewForJobPerson failed: unknown result");
  }

  public function emailMessageViewForMessageParts($sessionid, $message, $parts, $jobpriority)
  {
    $this->send_emailMessageViewForMessageParts($sessionid, $message, $parts, $jobpriority);
    return $this->recv_emailMessageViewForMessageParts();
  }

  public function send_emailMessageViewForMessageParts($sessionid, $message, $parts, $jobpriority)
  {
    $args = new commsuite_CommSuite_emailMessageViewForMessageParts_args();
    $args->sessionid = $sessionid;
    $args->message = $message;
    $args->parts = $parts;
    $args->jobpriority = $jobpriority;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'emailMessageViewForMessageParts', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('emailMessageViewForMessageParts', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_emailMessageViewForMessageParts()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'commsuite_CommSuite_emailMessageViewForMessageParts_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new commsuite_CommSuite_emailMessageViewForMessageParts_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sie !== null) {
      throw $result->sie;
    }
    throw new Exception("emailMessageViewForMessageParts failed: unknown result");
  }

  public function audioFileGetForFormat($sessionid, $contentid, $format)
  {
    $this->send_audioFileGetForFormat($sessionid, $contentid, $format);
    return $this->recv_audioFileGetForFormat();
  }

  public function send_audioFileGetForFormat($sessionid, $contentid, $format)
  {
    $args = new commsuite_CommSuite_audioFileGetForFormat_args();
    $args->sessionid = $sessionid;
    $args->contentid = $contentid;
    $args->format = $format;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'audioFileGetForFormat', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('audioFileGetForFormat', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_audioFileGetForFormat()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'commsuite_CommSuite_audioFileGetForFormat_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new commsuite_CommSuite_audioFileGetForFormat_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sie !== null) {
      throw $result->sie;
    }
    if ($result->nfe !== null) {
      throw $result->nfe;
    }
    throw new Exception("audioFileGetForFormat failed: unknown result");
  }

  public function ttsGetForTextLanguageGenderFormat($text, $language, $gender, $format)
  {
    $this->send_ttsGetForTextLanguageGenderFormat($text, $language, $gender, $format);
    return $this->recv_ttsGetForTextLanguageGenderFormat();
  }

  public function send_ttsGetForTextLanguageGenderFormat($text, $language, $gender, $format)
  {
    $args = new commsuite_CommSuite_ttsGetForTextLanguageGenderFormat_args();
    $args->text = $text;
    $args->language = $language;
    $args->gender = $gender;
    $args->format = $format;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ttsGetForTextLanguageGenderFormat', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ttsGetForTextLanguageGenderFormat', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ttsGetForTextLanguageGenderFormat()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'commsuite_CommSuite_ttsGetForTextLanguageGenderFormat_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new commsuite_CommSuite_ttsGetForTextLanguageGenderFormat_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->nfe !== null) {
      throw $result->nfe;
    }
    throw new Exception("ttsGetForTextLanguageGenderFormat failed: unknown result");
  }

  public function phoneMessageGetMp3AudioFile($sessionid, $parts)
  {
    $this->send_phoneMessageGetMp3AudioFile($sessionid, $parts);
    return $this->recv_phoneMessageGetMp3AudioFile();
  }

  public function send_phoneMessageGetMp3AudioFile($sessionid, $parts)
  {
    $args = new commsuite_CommSuite_phoneMessageGetMp3AudioFile_args();
    $args->sessionid = $sessionid;
    $args->parts = $parts;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'phoneMessageGetMp3AudioFile', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('phoneMessageGetMp3AudioFile', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_phoneMessageGetMp3AudioFile()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'commsuite_CommSuite_phoneMessageGetMp3AudioFile_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new commsuite_CommSuite_phoneMessageGetMp3AudioFile_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sie !== null) {
      throw $result->sie;
    }
    if ($result->nfe !== null) {
      throw $result->nfe;
    }
    throw new Exception("phoneMessageGetMp3AudioFile failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class commsuite_CommSuite_emailMessagePreviewForPriority_args {
  static $_TSPEC;

  public $sessionid = null;
  public $messageid = null;
  public $jobpriority = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sessionid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'messageid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'jobpriority',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sessionid'])) {
        $this->sessionid = $vals['sessionid'];
      }
      if (isset($vals['messageid'])) {
        $this->messageid = $vals['messageid'];
      }
      if (isset($vals['jobpriority'])) {
        $this->jobpriority = $vals['jobpriority'];
      }
    }
  }

  public function getName() {
    return 'CommSuite_emailMessagePreviewForPriority_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sessionid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->messageid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->jobpriority);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommSuite_emailMessagePreviewForPriority_args');
    if ($this->sessionid !== null) {
      $xfer += $output->writeFieldBegin('sessionid', TType::STRING, 1);
      $xfer += $output->writeString($this->sessionid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->messageid !== null) {
      $xfer += $output->writeFieldBegin('messageid', TType::I32, 2);
      $xfer += $output->writeI32($this->messageid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jobpriority !== null) {
      $xfer += $output->writeFieldBegin('jobpriority', TType::I32, 3);
      $xfer += $output->writeI32($this->jobpriority);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class commsuite_CommSuite_emailMessagePreviewForPriority_result {
  static $_TSPEC;

  public $success = null;
  public $sie = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'commsuite_EmailMessageView',
          ),
        1 => array(
          'var' => 'sie',
          'type' => TType::STRUCT,
          'class' => 'commsuite_SessionInvalidException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sie'])) {
        $this->sie = $vals['sie'];
      }
    }
  }

  public function getName() {
    return 'CommSuite_emailMessagePreviewForPriority_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new commsuite_EmailMessageView();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sie = new commsuite_SessionInvalidException();
            $xfer += $this->sie->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommSuite_emailMessagePreviewForPriority_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sie !== null) {
      $xfer += $output->writeFieldBegin('sie', TType::STRUCT, 1);
      $xfer += $this->sie->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class commsuite_CommSuite_emailMessageViewForJobPerson_args {
  static $_TSPEC;

  public $sessionid = null;
  public $messageid = null;
  public $jobid = null;
  public $personid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sessionid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'messageid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'jobid',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'personid',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sessionid'])) {
        $this->sessionid = $vals['sessionid'];
      }
      if (isset($vals['messageid'])) {
        $this->messageid = $vals['messageid'];
      }
      if (isset($vals['jobid'])) {
        $this->jobid = $vals['jobid'];
      }
      if (isset($vals['personid'])) {
        $this->personid = $vals['personid'];
      }
    }
  }

  public function getName() {
    return 'CommSuite_emailMessageViewForJobPerson_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sessionid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->messageid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->jobid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->personid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommSuite_emailMessageViewForJobPerson_args');
    if ($this->sessionid !== null) {
      $xfer += $output->writeFieldBegin('sessionid', TType::STRING, 1);
      $xfer += $output->writeString($this->sessionid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->messageid !== null) {
      $xfer += $output->writeFieldBegin('messageid', TType::I32, 2);
      $xfer += $output->writeI32($this->messageid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jobid !== null) {
      $xfer += $output->writeFieldBegin('jobid', TType::I32, 3);
      $xfer += $output->writeI32($this->jobid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->personid !== null) {
      $xfer += $output->writeFieldBegin('personid', TType::I32, 4);
      $xfer += $output->writeI32($this->personid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class commsuite_CommSuite_emailMessageViewForJobPerson_result {
  static $_TSPEC;

  public $success = null;
  public $sie = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'commsuite_EmailMessageView',
          ),
        1 => array(
          'var' => 'sie',
          'type' => TType::STRUCT,
          'class' => 'commsuite_SessionInvalidException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sie'])) {
        $this->sie = $vals['sie'];
      }
    }
  }

  public function getName() {
    return 'CommSuite_emailMessageViewForJobPerson_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new commsuite_EmailMessageView();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sie = new commsuite_SessionInvalidException();
            $xfer += $this->sie->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommSuite_emailMessageViewForJobPerson_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sie !== null) {
      $xfer += $output->writeFieldBegin('sie', TType::STRUCT, 1);
      $xfer += $this->sie->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class commsuite_CommSuite_emailMessageViewForMessageParts_args {
  static $_TSPEC;

  public $sessionid = null;
  public $message = null;
  public $parts = null;
  public $jobpriority = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sessionid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRUCT,
          'class' => 'commsuite_MessageDTO',
          ),
        3 => array(
          'var' => 'parts',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'commsuite_MessagePartDTO',
            ),
          ),
        4 => array(
          'var' => 'jobpriority',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sessionid'])) {
        $this->sessionid = $vals['sessionid'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['parts'])) {
        $this->parts = $vals['parts'];
      }
      if (isset($vals['jobpriority'])) {
        $this->jobpriority = $vals['jobpriority'];
      }
    }
  }

  public function getName() {
    return 'CommSuite_emailMessageViewForMessageParts_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sessionid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->message = new commsuite_MessageDTO();
            $xfer += $this->message->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->parts = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new commsuite_MessagePartDTO();
              $xfer += $elem12->read($input);
              $this->parts []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->jobpriority);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommSuite_emailMessageViewForMessageParts_args');
    if ($this->sessionid !== null) {
      $xfer += $output->writeFieldBegin('sessionid', TType::STRING, 1);
      $xfer += $output->writeString($this->sessionid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      if (!is_object($this->message)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('message', TType::STRUCT, 2);
      $xfer += $this->message->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parts !== null) {
      if (!is_array($this->parts)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('parts', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->parts));
        {
          foreach ($this->parts as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jobpriority !== null) {
      $xfer += $output->writeFieldBegin('jobpriority', TType::I32, 4);
      $xfer += $output->writeI32($this->jobpriority);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class commsuite_CommSuite_emailMessageViewForMessageParts_result {
  static $_TSPEC;

  public $success = null;
  public $sie = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'commsuite_EmailMessageView',
          ),
        1 => array(
          'var' => 'sie',
          'type' => TType::STRUCT,
          'class' => 'commsuite_SessionInvalidException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sie'])) {
        $this->sie = $vals['sie'];
      }
    }
  }

  public function getName() {
    return 'CommSuite_emailMessageViewForMessageParts_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new commsuite_EmailMessageView();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sie = new commsuite_SessionInvalidException();
            $xfer += $this->sie->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommSuite_emailMessageViewForMessageParts_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sie !== null) {
      $xfer += $output->writeFieldBegin('sie', TType::STRUCT, 1);
      $xfer += $this->sie->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class commsuite_CommSuite_audioFileGetForFormat_args {
  static $_TSPEC;

  public $sessionid = null;
  public $contentid = null;
  public $format = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sessionid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'contentid',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'format',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sessionid'])) {
        $this->sessionid = $vals['sessionid'];
      }
      if (isset($vals['contentid'])) {
        $this->contentid = $vals['contentid'];
      }
      if (isset($vals['format'])) {
        $this->format = $vals['format'];
      }
    }
  }

  public function getName() {
    return 'CommSuite_audioFileGetForFormat_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sessionid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->contentid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->format);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommSuite_audioFileGetForFormat_args');
    if ($this->sessionid !== null) {
      $xfer += $output->writeFieldBegin('sessionid', TType::STRING, 1);
      $xfer += $output->writeString($this->sessionid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contentid !== null) {
      $xfer += $output->writeFieldBegin('contentid', TType::I64, 2);
      $xfer += $output->writeI64($this->contentid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->format !== null) {
      $xfer += $output->writeFieldBegin('format', TType::STRING, 3);
      $xfer += $output->writeString($this->format);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class commsuite_CommSuite_audioFileGetForFormat_result {
  static $_TSPEC;

  public $success = null;
  public $sie = null;
  public $nfe = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'commsuite_FileData',
          ),
        1 => array(
          'var' => 'sie',
          'type' => TType::STRUCT,
          'class' => 'commsuite_SessionInvalidException',
          ),
        2 => array(
          'var' => 'nfe',
          'type' => TType::STRUCT,
          'class' => 'commsuite_NotFoundException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sie'])) {
        $this->sie = $vals['sie'];
      }
      if (isset($vals['nfe'])) {
        $this->nfe = $vals['nfe'];
      }
    }
  }

  public function getName() {
    return 'CommSuite_audioFileGetForFormat_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new commsuite_FileData();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sie = new commsuite_SessionInvalidException();
            $xfer += $this->sie->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->nfe = new commsuite_NotFoundException();
            $xfer += $this->nfe->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommSuite_audioFileGetForFormat_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sie !== null) {
      $xfer += $output->writeFieldBegin('sie', TType::STRUCT, 1);
      $xfer += $this->sie->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nfe !== null) {
      $xfer += $output->writeFieldBegin('nfe', TType::STRUCT, 2);
      $xfer += $this->nfe->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class commsuite_CommSuite_ttsGetForTextLanguageGenderFormat_args {
  static $_TSPEC;

  public $text = null;
  public $language = null;
  public $gender = null;
  public $format = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'text',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'language',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'gender',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'format',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['text'])) {
        $this->text = $vals['text'];
      }
      if (isset($vals['language'])) {
        $this->language = $vals['language'];
      }
      if (isset($vals['gender'])) {
        $this->gender = $vals['gender'];
      }
      if (isset($vals['format'])) {
        $this->format = $vals['format'];
      }
    }
  }

  public function getName() {
    return 'CommSuite_ttsGetForTextLanguageGenderFormat_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->text);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->language);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->gender);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->format);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommSuite_ttsGetForTextLanguageGenderFormat_args');
    if ($this->text !== null) {
      $xfer += $output->writeFieldBegin('text', TType::STRING, 1);
      $xfer += $output->writeString($this->text);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->language !== null) {
      $xfer += $output->writeFieldBegin('language', TType::STRING, 2);
      $xfer += $output->writeString($this->language);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gender !== null) {
      $xfer += $output->writeFieldBegin('gender', TType::STRING, 3);
      $xfer += $output->writeString($this->gender);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->format !== null) {
      $xfer += $output->writeFieldBegin('format', TType::STRING, 4);
      $xfer += $output->writeString($this->format);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class commsuite_CommSuite_ttsGetForTextLanguageGenderFormat_result {
  static $_TSPEC;

  public $success = null;
  public $nfe = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'commsuite_FileData',
          ),
        1 => array(
          'var' => 'nfe',
          'type' => TType::STRUCT,
          'class' => 'commsuite_NotFoundException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['nfe'])) {
        $this->nfe = $vals['nfe'];
      }
    }
  }

  public function getName() {
    return 'CommSuite_ttsGetForTextLanguageGenderFormat_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new commsuite_FileData();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->nfe = new commsuite_NotFoundException();
            $xfer += $this->nfe->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommSuite_ttsGetForTextLanguageGenderFormat_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nfe !== null) {
      $xfer += $output->writeFieldBegin('nfe', TType::STRUCT, 1);
      $xfer += $this->nfe->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class commsuite_CommSuite_phoneMessageGetMp3AudioFile_args {
  static $_TSPEC;

  public $sessionid = null;
  public $parts = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sessionid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parts',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'commsuite_MessagePartDTO',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sessionid'])) {
        $this->sessionid = $vals['sessionid'];
      }
      if (isset($vals['parts'])) {
        $this->parts = $vals['parts'];
      }
    }
  }

  public function getName() {
    return 'CommSuite_phoneMessageGetMp3AudioFile_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sessionid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->parts = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $elem19 = new commsuite_MessagePartDTO();
              $xfer += $elem19->read($input);
              $this->parts []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommSuite_phoneMessageGetMp3AudioFile_args');
    if ($this->sessionid !== null) {
      $xfer += $output->writeFieldBegin('sessionid', TType::STRING, 1);
      $xfer += $output->writeString($this->sessionid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parts !== null) {
      if (!is_array($this->parts)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('parts', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->parts));
        {
          foreach ($this->parts as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class commsuite_CommSuite_phoneMessageGetMp3AudioFile_result {
  static $_TSPEC;

  public $success = null;
  public $sie = null;
  public $nfe = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'commsuite_FileData',
          ),
        1 => array(
          'var' => 'sie',
          'type' => TType::STRUCT,
          'class' => 'commsuite_SessionInvalidException',
          ),
        2 => array(
          'var' => 'nfe',
          'type' => TType::STRUCT,
          'class' => 'commsuite_NotFoundException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sie'])) {
        $this->sie = $vals['sie'];
      }
      if (isset($vals['nfe'])) {
        $this->nfe = $vals['nfe'];
      }
    }
  }

  public function getName() {
    return 'CommSuite_phoneMessageGetMp3AudioFile_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new commsuite_FileData();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sie = new commsuite_SessionInvalidException();
            $xfer += $this->sie->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->nfe = new commsuite_NotFoundException();
            $xfer += $this->nfe->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommSuite_phoneMessageGetMp3AudioFile_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sie !== null) {
      $xfer += $output->writeFieldBegin('sie', TType::STRUCT, 1);
      $xfer += $this->sie->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nfe !== null) {
      $xfer += $output->writeFieldBegin('nfe', TType::STRUCT, 2);
      $xfer += $this->nfe->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
