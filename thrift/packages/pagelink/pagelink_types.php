<?php
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';


class pagelink_FileData {
  static $_TSPEC;

  public $contenttype = null;
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'contenttype',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'data',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['contenttype'])) {
        $this->contenttype = $vals['contenttype'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'FileData';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->contenttype);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->data);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FileData');
    if ($this->contenttype !== null) {
      $xfer += $output->writeFieldBegin('contenttype', TType::STRING, 1);
      $xfer += $output->writeString($this->contenttype);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      $xfer += $output->writeFieldBegin('data', TType::STRING, 2);
      $xfer += $output->writeString($this->data);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class pagelink_PostPageAttachment {
  static $_TSPEC;

  public $contentid = null;
  public $filename = null;
  public $size = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'contentid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'filename',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'size',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['contentid'])) {
        $this->contentid = $vals['contentid'];
      }
      if (isset($vals['filename'])) {
        $this->filename = $vals['filename'];
      }
      if (isset($vals['size'])) {
        $this->size = $vals['size'];
      }
    }
  }

  public function getName() {
    return 'PostPageAttachment';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->contentid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->filename);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PostPageAttachment');
    if ($this->contentid !== null) {
      $xfer += $output->writeFieldBegin('contentid', TType::I64, 1);
      $xfer += $output->writeI64($this->contentid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filename !== null) {
      $xfer += $output->writeFieldBegin('filename', TType::STRING, 2);
      $xfer += $output->writeString($this->filename);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->size !== null) {
      $xfer += $output->writeFieldBegin('size', TType::I32, 3);
      $xfer += $output->writeI32($this->size);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class pagelink_PostPage {
  static $_TSPEC;

  public $customerdisplayname = null;
  public $urlcomponent = null;
  public $timezone = null;
  public $brandinfo = null;
  public $logocontentid = null;
  public $jobname = null;
  public $jobdescription = null;
  public $jobstarttime = null;
  public $nummessageparts = null;
  public $pagecontent = null;
  public $attachments = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'customerdisplayname',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'urlcomponent',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timezone',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'brandinfo',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        5 => array(
          'var' => 'logocontentid',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'jobname',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'jobdescription',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'jobstarttime',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'nummessageparts',
          'type' => TType::BYTE,
          ),
        10 => array(
          'var' => 'pagecontent',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'attachments',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'pagelink_PostPageAttachment',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['customerdisplayname'])) {
        $this->customerdisplayname = $vals['customerdisplayname'];
      }
      if (isset($vals['urlcomponent'])) {
        $this->urlcomponent = $vals['urlcomponent'];
      }
      if (isset($vals['timezone'])) {
        $this->timezone = $vals['timezone'];
      }
      if (isset($vals['brandinfo'])) {
        $this->brandinfo = $vals['brandinfo'];
      }
      if (isset($vals['logocontentid'])) {
        $this->logocontentid = $vals['logocontentid'];
      }
      if (isset($vals['jobname'])) {
        $this->jobname = $vals['jobname'];
      }
      if (isset($vals['jobdescription'])) {
        $this->jobdescription = $vals['jobdescription'];
      }
      if (isset($vals['jobstarttime'])) {
        $this->jobstarttime = $vals['jobstarttime'];
      }
      if (isset($vals['nummessageparts'])) {
        $this->nummessageparts = $vals['nummessageparts'];
      }
      if (isset($vals['pagecontent'])) {
        $this->pagecontent = $vals['pagecontent'];
      }
      if (isset($vals['attachments'])) {
        $this->attachments = $vals['attachments'];
      }
    }
  }

  public function getName() {
    return 'PostPage';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->customerdisplayname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->urlcomponent);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timezone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::MAP) {
            $this->brandinfo = array();
            $_size0 = 0;
            $_ktype1 = 0;
            $_vtype2 = 0;
            $xfer += $input->readMapBegin($_ktype1, $_vtype2, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $key5 = '';
              $val6 = '';
              $xfer += $input->readString($key5);
              $xfer += $input->readString($val6);
              $this->brandinfo[$key5] = $val6;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->logocontentid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->jobname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->jobdescription);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->jobstarttime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->nummessageparts);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pagecontent);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::LST) {
            $this->attachments = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new pagelink_PostPageAttachment();
              $xfer += $elem12->read($input);
              $this->attachments []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PostPage');
    if ($this->customerdisplayname !== null) {
      $xfer += $output->writeFieldBegin('customerdisplayname', TType::STRING, 1);
      $xfer += $output->writeString($this->customerdisplayname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->urlcomponent !== null) {
      $xfer += $output->writeFieldBegin('urlcomponent', TType::STRING, 2);
      $xfer += $output->writeString($this->urlcomponent);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timezone !== null) {
      $xfer += $output->writeFieldBegin('timezone', TType::STRING, 3);
      $xfer += $output->writeString($this->timezone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->brandinfo !== null) {
      if (!is_array($this->brandinfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('brandinfo', TType::MAP, 4);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->brandinfo));
        {
          foreach ($this->brandinfo as $kiter13 => $viter14)
          {
            $xfer += $output->writeString($kiter13);
            $xfer += $output->writeString($viter14);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->logocontentid !== null) {
      $xfer += $output->writeFieldBegin('logocontentid', TType::I64, 5);
      $xfer += $output->writeI64($this->logocontentid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jobname !== null) {
      $xfer += $output->writeFieldBegin('jobname', TType::STRING, 6);
      $xfer += $output->writeString($this->jobname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jobdescription !== null) {
      $xfer += $output->writeFieldBegin('jobdescription', TType::STRING, 7);
      $xfer += $output->writeString($this->jobdescription);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jobstarttime !== null) {
      $xfer += $output->writeFieldBegin('jobstarttime', TType::I32, 8);
      $xfer += $output->writeI32($this->jobstarttime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nummessageparts !== null) {
      $xfer += $output->writeFieldBegin('nummessageparts', TType::BYTE, 9);
      $xfer += $output->writeByte($this->nummessageparts);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pagecontent !== null) {
      $xfer += $output->writeFieldBegin('pagecontent', TType::STRING, 10);
      $xfer += $output->writeString($this->pagecontent);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attachments !== null) {
      if (!is_array($this->attachments)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('attachments', TType::LST, 11);
      {
        $output->writeListBegin(TType::STRUCT, count($this->attachments));
        {
          foreach ($this->attachments as $iter15)
          {
            $xfer += $iter15->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class pagelink_NotFoundException extends TException {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'NotFoundException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NotFoundException');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
