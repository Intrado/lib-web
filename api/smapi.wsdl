<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- stylesheet goes here -->
<wsdl:definitions xmlns:sm="http://asp.schoolmessenger.com" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="SMAPI" targetNamespace="http://asp.schoolmessenger.com" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/">
    <wsdl:documentation></wsdl:documentation>
    <wsdl:types><xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" targetNamespace="http://asp.schoolmessenger.com">

	<xsd:complexType name="list">
		<xsd:sequence>
			<xsd:element name="id" type="xsd:int">
				<xsd:annotation>
					<xsd:documentation>unique identifier of list
</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="name" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>name of list
</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="description" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>description of list
</xsd:documentation>
				</xsd:annotation></xsd:element>
		</xsd:sequence>
	</xsd:complexType>

	
	<xsd:complexType name="message">
		<xsd:sequence>
			<xsd:element name="id" type="xsd:int">
				<xsd:annotation>
					<xsd:documentation>unique identifier
</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="name" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>name
</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="description" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>description
</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="type" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>'phone', 'email', 'sms'
</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="language" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>'default' (usually 'English'), 'Spanish', ...
</xsd:documentation>
				</xsd:annotation></xsd:element>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="jobtype">
		<xsd:sequence>
			<xsd:element name="id" type="xsd:int">
				<xsd:annotation>
					<xsd:documentation>unique identifier
</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="name" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>display name of job type
</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="info" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>detailed display information about job type
</xsd:documentation>
				</xsd:annotation></xsd:element>
		</xsd:sequence>
	</xsd:complexType>


	<xsd:complexType name="jobstatus">
		<xsd:sequence>
			<xsd:element name="id" type="xsd:int">
				<xsd:annotation>
					<xsd:documentation>unique identifier of job

</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="name" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>name of job
</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="description" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>description
</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="hasphone" type="xsd:boolean">
				<xsd:annotation>
					<xsd:documentation>job has phone message
</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="hasemail" type="xsd:boolean">
				<xsd:annotation>
					<xsd:documentation>job has email message
</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="hassms" type="xsd:boolean">
				<xsd:annotation>
					<xsd:documentation>job has sms message
</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="phonetotal" type="xsd:int">
				<xsd:annotation>
					<xsd:documentation>total phone numbers called
</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="emailtotal" type="xsd:int">
				<xsd:annotation>
					<xsd:documentation>total email sent
</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="printtotal" type="xsd:int">
				<xsd:annotation>
					<xsd:documentation>(obsolete)
</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="smstotal" type="xsd:int">
				<xsd:annotation>
					<xsd:documentation>total SMS messages sent
</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="phoneremaining" type="xsd:int">
				<xsd:annotation>
					<xsd:documentation>remaining phone numbers to call
</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="emailremaining" type="xsd:int">
				<xsd:annotation>
					<xsd:documentation>remaining email to send
</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="smsremaining" type="xsd:int">
				<xsd:annotation>
					<xsd:documentation>remaining SMS to send
</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="startdate" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>date and time job started, format YYYY-MM-DD HH:MM:SS
</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="status" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>'new','scheduled','processing','procactive','active','complete','cancelled','cancelling','repeating'
</xsd:documentation>
				</xsd:annotation></xsd:element>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="loginResult">
		<xsd:sequence>
			<xsd:element name="sessionid" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>a newly generated session identifier for use with this login session.</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="resultcode" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>'success', 'failure'</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="resultdescription" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>if not success, contains the reason for error</xsd:documentation>
				</xsd:annotation></xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	

	<xsd:complexType name="getListsResult">
		<xsd:sequence>
			<xsd:element name="lists" type="sm:list" minOccurs="0"
				maxOccurs="unbounded">
                        <xsd:annotation>
                        	<xsd:documentation>array of lists
</xsd:documentation>
                        </xsd:annotation>
			</xsd:element>
			<xsd:element name="resultcode" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>'success', 'failure'
</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="resultdescription" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>if not success, contains the reason for error</xsd:documentation></xsd:annotation></xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="getMessagesResult">
		<xsd:sequence>
			<xsd:element name="messages" type="sm:message" minOccurs="0"
				maxOccurs="unbounded">
                        <xsd:annotation>
                        	<xsd:documentation>array of messages
</xsd:documentation>
                        </xsd:annotation>
			</xsd:element>
			<xsd:element name="resultcode" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>'success', 'failure'
</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="resultdescription" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>if not success, contains the reason for error</xsd:documentation></xsd:annotation></xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="setMessagebodyResult">
		<xsd:sequence>
			<xsd:element name="result" type="xsd:boolean">
				<xsd:annotation>
					<xsd:documentation>true if success, else false
</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="resultcode" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>'success', 'failure'
</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="resultdescription" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>if not success, contains the reason for error</xsd:documentation></xsd:annotation></xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="uploadAudioResult">
		<xsd:sequence>
			<xsd:element name="audioname" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>name of audiofile record created, may append current date and time
</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="resultcode" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>'success', 'failure'
</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="resultdescription" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>if not success, contains the reason for error</xsd:documentation></xsd:annotation></xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="getJobTypesResult">
		<xsd:sequence>
			<xsd:element name="jobtypes" type="sm:jobtype" minOccurs="0"
				maxOccurs="unbounded">
                        <xsd:annotation>
                        	<xsd:documentation>array of jobtypes, empty on failure
</xsd:documentation>
                        </xsd:annotation>
			</xsd:element>
			<xsd:element name="resultcode" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>'success', 'failure'
</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="resultdescription" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>if not success, contains the reason for error
</xsd:documentation>
				</xsd:annotation></xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="getRepeatingJobsResult">
		<xsd:sequence>
			<xsd:element name="jobs" type="sm:job" minOccurs="0"
				maxOccurs="unbounded">
                        <xsd:annotation>
                        	<xsd:documentation>array of repeating jobs
</xsd:documentation>
                        </xsd:annotation>
			</xsd:element>
			<xsd:element name="resultcode" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>'success', 'failure'
</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="resultdescription" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>if not success, contains the reason for error
</xsd:documentation>
				</xsd:annotation></xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	
	
	<xsd:complexType name="getJobStatusResult">
		<xsd:sequence>
			<xsd:element name="job" type="sm:jobstatus"></xsd:element>
			<xsd:element name="resultcode" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>'success', 'failure'
</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="resultdescription" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>if not success, contains the reason for error
</xsd:documentation>
				</xsd:annotation></xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="sendJobResult">
		<xsd:sequence>
			<xsd:element name="jobid" type="xsd:int">
				<xsd:annotation>
					<xsd:documentation>the job identifier
</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="resultcode" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>'success', 'failure' for sendJob()
sendJobExtended() supports more results
        'success' : operation successful
        'failure' : unexpected failure
        'invalidsession' : sessionid invalid or expired
        'invalidparam' : invalid parameter
        'unauthorized' : user is not authorized to perform action on these parameters

</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="resultdescription" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>if not success, contains the reason for error
</xsd:documentation>
				</xsd:annotation></xsd:element>
		</xsd:sequence>
	</xsd:complexType>
        
	<xsd:complexType name="job">
		<xsd:sequence>
			<xsd:element name="id" type="xsd:int">
				<xsd:annotation>
					<xsd:documentation>unique identifier of job
</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="name" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>name
</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="description" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>description
</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="phonemessages" type="sm:message" maxOccurs="unbounded" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>array of phone messages
</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="emailmessages" type="sm:message" maxOccurs="unbounded" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>array of email messages
</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="smsmessages" type="sm:message" maxOccurs="unbounded" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>array of sms messages
</xsd:documentation>
				</xsd:annotation></xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="getActiveJobsResult">
		<xsd:sequence>
			<xsd:element name="jobs" type="sm:jobstatus" minOccurs="0"
				maxOccurs="unbounded">
                        <xsd:annotation>
                        	<xsd:documentation>array of active jobs
</xsd:documentation>
                        </xsd:annotation>
			</xsd:element>
			<xsd:element name="resultcode" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>'success', 'failure'
</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="resultdescription" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>if not success, contains the reason for error
</xsd:documentation>
				</xsd:annotation></xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="getContactsResult">
		<xsd:sequence>
			<xsd:element name="resultcode" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>'success', 'failure'
</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="resultdescription" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>if not success, contains the reason for error
</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="contacts" type="sm:Contact" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>array of contact destinations (phone, email, sms) for this person

</xsd:documentation>
				</xsd:annotation></xsd:element>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="Contact">
		<xsd:sequence>
			<xsd:element name="pkey" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>unique identifier of person
</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="type" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>'phone', 'email', 'sms'
</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="destination" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>based on type, either the phone number or email address
</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="sequence" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>0, 1, 2, ...
</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="contactpreferences" type="sm:ContactPreference" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>array of contact preferences (based on job type)
</xsd:documentation>
				</xsd:annotation></xsd:element>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="ContactPreference">
		<xsd:sequence>
			<xsd:element name="jobtypeid" type="xsd:int">
				<xsd:annotation>
					<xsd:documentation>job type identifier
</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="enabled" type="xsd:boolean">
				<xsd:annotation>
					<xsd:documentation>true if prefer contact this destination for this job type, false if prefer not to contact

</xsd:documentation>
				</xsd:annotation></xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="setContactsResult">
		<xsd:sequence>
			<xsd:element name="resultcode" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>'success', 'failure'
</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="resultdescription" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>if not success, contains the reason for error
</xsd:documentation>
				</xsd:annotation></xsd:element>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="getCustomerURLResult">
		<xsd:sequence>
			<xsd:element name="resultcode" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>'success', 'failure'
</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="resultdescription" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>if not success, contains the reason for error
</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="customerurl" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>URL component for this customer, used by loginToCustomer()

</xsd:documentation>
				</xsd:annotation></xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="loginToCustomerResult">
		<xsd:sequence>
                    <xsd:element name="sessionid" type="xsd:string">
                    	<xsd:annotation>
                    		<xsd:documentation>a newly generated session identifier for use with this login session.
</xsd:documentation>
                    	</xsd:annotation></xsd:element>
                    <xsd:element name="resultcode" type="xsd:string">
                    	<xsd:annotation>
                    		<xsd:documentation>'success', 'failure'
</xsd:documentation>
                    	</xsd:annotation></xsd:element>
                    <xsd:element name="resultdescription" type="xsd:string">
                    	<xsd:annotation>
                    		<xsd:documentation>if not success, contains the reason for error
</xsd:documentation>
                    	</xsd:annotation></xsd:element>
                </xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="getLabelsResult">
		<xsd:sequence>
			<xsd:element name="resultcode" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>'success', 'failure'
</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="resultdescription" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>if not success, contains the reason for error
</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="labels" type="sm:Label" maxOccurs="unbounded" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>array of labels, based on destination type (phone, email, sms)
</xsd:documentation>
				</xsd:annotation></xsd:element>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="Label">
		<xsd:sequence>
			<xsd:element name="sequence" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>0, 1, 2, ...
</xsd:documentation>
				</xsd:annotation></xsd:element>
			<xsd:element name="label" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>display description of label for destination type (phone, email, sms) Example: Home Phone
</xsd:documentation>
				</xsd:annotation></xsd:element>
		</xsd:sequence>
	</xsd:complexType>
            <xsd:complexType name="createMessageResult">
            	<xsd:sequence>
            		<xsd:element name="resultcode" type="xsd:string">
            			<xsd:annotation>
            				<xsd:documentation>        'success' : operation successful
        'failure' : unexpected failure
        'invalidsession' : sessionid invalid or expired
        'invalidparam' : invalid parameter
        'unauthorized' : user is not authorized to perform action on these parameters
</xsd:documentation>
            			</xsd:annotation></xsd:element>
            		<xsd:element name="resultdescription"
            			type="xsd:string">
                        <xsd:annotation>
                        	<xsd:documentation>if not success, contains the reason for error
</xsd:documentation>
                        </xsd:annotation>
            		</xsd:element>
            		<xsd:element name="messageid" type="xsd:int">
            			<xsd:annotation>
            				<xsd:documentation>unique identifier of message just created
</xsd:documentation>
            			</xsd:annotation></xsd:element>
            	</xsd:sequence>

            </xsd:complexType>
            <xsd:complexType name="listids">
            	<xsd:sequence>
            		<xsd:element name="listid" type="xsd:int" minOccurs="1" maxOccurs="unbounded"></xsd:element>
            	</xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="jobOptions">
            	<xsd:sequence>
            		<xsd:element name="jobOption" type="sm:jobOptionEntry" minOccurs="0" maxOccurs="unbounded"></xsd:element>
            	</xsd:sequence>
            </xsd:complexType>

            <xsd:complexType name="jobOptionEntry">
                <xsd:annotation>
                	<xsd:documentation></xsd:documentation>
                </xsd:annotation>
                <xsd:sequence>
            		<xsd:element name="name" type="xsd:string">
            			<xsd:annotation>
            				<xsd:documentation>all job options are optional, the following is a list of supported name/value pairs:
"leavemessage" with value 'true' or 'false'
"messageconfirmation" with value 'true' or 'false'
"sendreport" with value 'true' or 'false'
"callerid" with valid 10 digit phone number

</xsd:documentation>
            			</xsd:annotation></xsd:element>
            		<xsd:element name="value" type="xsd:string"></xsd:element>
            	</xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="setContactDestinationResult">
            	<xsd:sequence>
            		<xsd:element name="resultcode" type="xsd:string">
            			<xsd:annotation>
            				<xsd:documentation>        'success' : operation successful
        'failure' : unexpected failure
        'invalidsession' : sessionid invalid or expired
        'invalidparam' : invalid parameter
        'unauthorized' : user is not authorized to perform action on these parameters
</xsd:documentation></xsd:annotation></xsd:element>
            		<xsd:element name="resultdescription" type="xsd:string">
            			<xsd:annotation>
            				<xsd:documentation>if not success, contains the reason for error
</xsd:documentation>
            			</xsd:annotation></xsd:element>
            	</xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="setContactPreferenceResult">
            	<xsd:sequence>
            		<xsd:element name="resultcode" type="xsd:string">
            			<xsd:annotation>
            				<xsd:documentation>        'success' : operation successful
        'failure' : unexpected failure
        'invalidsession' : sessionid invalid or expired
        'invalidparam' : invalid parameter
        'unauthorized' : user is not authorized to perform action on these parameters
</xsd:documentation></xsd:annotation></xsd:element>
            		<xsd:element name="resultdescription" type="xsd:string">
            			<xsd:annotation>
            				<xsd:documentation>if not success, contains the reason for error
</xsd:documentation>
            			</xsd:annotation></xsd:element>
            	</xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="getPermissionsResult">
            	<xsd:sequence>
            		<xsd:element name="resultcode" type="xsd:string">
            			<xsd:annotation>
            				<xsd:documentation>        'success' : operation successful
        'failure' : unexpected failure
        'invalidsession' : sessionid invalid or expired
        'invalidparam' : invalid parameter
        'unauthorized' : user is not authorized to perform action on these parameters
</xsd:documentation></xsd:annotation></xsd:element>
            		<xsd:element name="resultdescription"
            			type="xsd:string">
                        <xsd:annotation>
                        	<xsd:documentation>if not success, contains the reason for error
</xsd:documentation>
                        </xsd:annotation>
            		</xsd:element>
            		<xsd:element name="permissions" type="sm:permissionEntry" minOccurs="0" maxOccurs="unbounded">
            			<xsd:annotation>
            				<xsd:documentation>Permissions contain the following:
'sendphone' = true/false
'sendemail' = true/false
'sendsms' = true/false
'callerid' = true/false
'maxjobdays' = maximum number of days a job may run
'callmax' = maximum number of phone attempts for each destination
'callearly' = 'HH:MM am' earliest time of day to make phone calls (if blank, unrestricted)
'calllate' = 'HH:MM pm' latest time of date to make phone calls (if blank, unrestricted)
</xsd:documentation>
            			</xsd:annotation></xsd:element>
            	</xsd:sequence>
            </xsd:complexType>

            <xsd:complexType name="permissionEntry">
            	<xsd:sequence>
            		<xsd:element name="name" type="xsd:string"></xsd:element>
            		<xsd:element name="value" type="xsd:string"></xsd:element>
            	</xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="getSettingsResult">
            	<xsd:sequence>
            		<xsd:element name="resultcode" type="xsd:string">
            			<xsd:annotation>
            				<xsd:documentation>        'success' : operation successful
        'failure' : unexpected failure
        'invalidsession' : sessionid invalid or expired
        'invalidparam' : invalid parameter
        'unauthorized' : user is not authorized to perform action on these parameters
</xsd:documentation></xsd:annotation></xsd:element>
            		<xsd:element name="resultdescription"
            			type="xsd:string">
                        <xsd:annotation>
                        	<xsd:documentation>if not success, contains the reason for error
</xsd:documentation>
                        </xsd:annotation>
            		</xsd:element>
            		<xsd:element name="settings" type="sm:SettingEntry" minOccurs="0" maxOccurs="unbounded">
            			<xsd:annotation>
            				<xsd:documentation>settings contain the following:
'maxjobdays' = preferred number of days a job may run (see getPermissions() for absolute max)
'callmax' = preferred number of attempts for each phone destination (see getPermissions() for absolute max)
'callearly' = 'HH:MM am' preferred time of day to begin phone calls (see getPermissions() for absolute), if blank unrestricted or no preference
'calllate' = 'HH:MM pm' preferred time of day to end phone calls (see getPermissions() for absolute), if blank unrestricted or no preference
'timezone' = customer timezone
'emaildomain' = restrict the 'from email' address on all email messages, if blank no restriction

</xsd:documentation>
            			</xsd:annotation></xsd:element>
            	</xsd:sequence>
            </xsd:complexType>

            <xsd:complexType name="SettingEntry">
            	<xsd:sequence>
            		<xsd:element name="name" type="xsd:string"></xsd:element>
            		<xsd:element name="value" type="xsd:string"></xsd:element>
            	</xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="getImportsResult">
            	<xsd:sequence>
            		<xsd:element
            			name="resultcode"
            			type="xsd:string">
                        <xsd:annotation>
                        	<xsd:documentation>        'success' : operation successful
        'failure' : unexpected failure
        'invalidsession' : sessionid invalid or expired
        'invalidparam' : invalid parameter
        'unauthorized' : user is not authorized to perform action on these parameters
</xsd:documentation></xsd:annotation>
            		</xsd:element>
            		<xsd:element
            			name="resultdescription"
            			type="xsd:string">
                        <xsd:annotation>
                        	<xsd:documentation>if not success, contains the reason for error
</xsd:documentation>
                        </xsd:annotation>
            		</xsd:element>
            		<xsd:element
            			name="imports"
            			type="sm:import" minOccurs="0" maxOccurs="unbounded">
            		</xsd:element>
            	</xsd:sequence>
            </xsd:complexType>

            <xsd:complexType name="import">
            	<xsd:sequence>
            		<xsd:element
            			name="id"
            			type="xsd:int">
                        <xsd:annotation>
                        	<xsd:documentation>unique identifier
</xsd:documentation>
                        </xsd:annotation>
            		</xsd:element>
            		<xsd:element
            			name="name"
            			type="xsd:string">
                        <xsd:annotation>
                        	<xsd:documentation>name
</xsd:documentation>
                        </xsd:annotation>
            		</xsd:element>
            		<xsd:element
            			name="description"
            			type="xsd:string">
                        <xsd:annotation>
                        	<xsd:documentation>description
</xsd:documentation>
                        </xsd:annotation>
            		</xsd:element>
            		<xsd:element
            			name="notes"
            			type="xsd:string">
                        <xsd:annotation>
                        	<xsd:documentation>additional notes about this import
</xsd:documentation>
                        </xsd:annotation>
            		</xsd:element>
            		<xsd:element
            			name="uploadkey"
            			type="xsd:string">
                        <xsd:annotation>
                        	<xsd:documentation>unique key used by import data uploader to identify which import to use
</xsd:documentation>
                        </xsd:annotation>
            		</xsd:element>
            		<xsd:element
            			name="type"
            			type="xsd:string">
                        <xsd:annotation>
                        	<xsd:documentation>'person', 'user', 'enrollment', 'section'
</xsd:documentation>
                        </xsd:annotation>
            		</xsd:element>
            		<xsd:element
            			name="method"
            			type="xsd:string">
                        <xsd:annotation>
                        	<xsd:documentation>'updateonly' only update existing data,
'update' update existing data and create new,
'full' update, create, and delete data records to match latest import data file,
'createonly' only create new data

</xsd:documentation>
                        </xsd:annotation>
            		</xsd:element>
            		<xsd:element
            			name="status"
            			type="xsd:string">
                        <xsd:annotation>
                        	<xsd:documentation>'idle', 'queued', 'running', 'error'
</xsd:documentation>
                        </xsd:annotation>
            		</xsd:element>
            		<xsd:element
            			name="lastrun"
            			type="xsd:string">
                        <xsd:annotation>
                        	<xsd:documentation>date import was last executed, format YYYY-MM-DD HH:MM:SS
empty if never

</xsd:documentation>
                        </xsd:annotation>
            		</xsd:element>
            		<xsd:element
            			name="filedate"
            			type="xsd:string">
                        <xsd:annotation>
                        	<xsd:documentation>date last import data was uploaded, format YYYY-MM-DD HH:MM:SS
empty if never

</xsd:documentation>
                        </xsd:annotation>
            		</xsd:element>
            		<xsd:element
            			name="filesize"
            			type="xsd:int">
                        <xsd:annotation>
                        	<xsd:documentation>number of bytes in data file

</xsd:documentation>
                        </xsd:annotation>
            		</xsd:element>
            		<xsd:element
            			name="automatic"
            			type="xsd:boolean">
                        <xsd:annotation>
                        	<xsd:documentation>true to automatically run import after new import data file is uploaded
</xsd:documentation>
                        </xsd:annotation>
            		</xsd:element>
            		<xsd:element
            			name="skipheaderlines"
            			type="xsd:int">
                        <xsd:annotation>
                        	<xsd:documentation>number of lines to skip at top of import data file
</xsd:documentation>
                        </xsd:annotation>
            		</xsd:element>
            	</xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="uploadImportResult">
            	<xsd:sequence>
            		<xsd:element
            			name="resultcode"
            			type="xsd:string">
                        <xsd:annotation>
                        	<xsd:documentation>        'success' : operation successful
        'failure' : unexpected failure
        'invalidsession' : sessionid invalid or expired
        'invalidparam' : invalid parameter
        'unauthorized' : user is not authorized to perform action on these parameters
</xsd:documentation></xsd:annotation>
            		</xsd:element>
            		<xsd:element
            			name="resultdescription"
            			type="xsd:string">
                        <xsd:annotation>
                        	<xsd:documentation>if not success, contains the reason for error
</xsd:documentation>
                        </xsd:annotation>
            		</xsd:element>
            	</xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="runImportResult">
            	<xsd:sequence>
            		<xsd:element
            			name="resultcode"
            			type="xsd:string">
                        <xsd:annotation>
                        	<xsd:documentation>        'success' : operation successful
        'failure' : unexpected failure
        'invalidsession' : sessionid invalid or expired
        'invalidparam' : invalid parameter
        'unauthorized' : user is not authorized to perform action on these parameters
</xsd:documentation></xsd:annotation>
            		</xsd:element>
            		<xsd:element
            			name="resultdescription"
            			type="xsd:string">
                        <xsd:annotation>
                        	<xsd:documentation>if not success, contains the reason for error
</xsd:documentation>
                        </xsd:annotation>
            		</xsd:element>
            	</xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="getImportDetailResult">
            	<xsd:sequence>
            		<xsd:element
            			name="resultcode"
            			type="xsd:string">
                        <xsd:annotation>
                        	<xsd:documentation>        'success' : operation successful
        'failure' : unexpected failure
        'invalidsession' : sessionid invalid or expired
        'invalidparam' : invalid parameter
        'unauthorized' : user is not authorized to perform action on these parameters
</xsd:documentation></xsd:annotation>
            		</xsd:element>
            		<xsd:element
            			name="resultdescription"
            			type="xsd:string">
                        <xsd:annotation>
                        	<xsd:documentation>if not success, contains the reason for error
</xsd:documentation>
                        </xsd:annotation>
            		</xsd:element>
            		<xsd:element
            			name="import"
            			type="sm:import">
            		</xsd:element>
            		<xsd:element
            			name="logentries"
            			type="sm:logentry" minOccurs="0" maxOccurs="unbounded">
            		</xsd:element>
            	</xsd:sequence>
            </xsd:complexType>

            <xsd:complexType name="logentry">
            	<xsd:sequence>
            		<xsd:element
            			name="severity"
            			type="xsd:string">
                        <xsd:annotation>
                        	<xsd:documentation>'info', 'error', 'warn'
</xsd:documentation>
                        </xsd:annotation>
            		</xsd:element>
            		<xsd:element
            			name="line"
            			type="xsd:int">
                        <xsd:annotation>
                        	<xsd:documentation>line number in import data where logentry was caused
</xsd:documentation>
                        </xsd:annotation>
            		</xsd:element>
            		<xsd:element
            			name="message"
            			type="xsd:string">
                        <xsd:annotation>
                        	<xsd:documentation>log entry message detail
</xsd:documentation>
                        </xsd:annotation>
            		</xsd:element>
            	</xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="pkeys">
            	<xsd:sequence>
            		<xsd:element
            			name="pkeys"
            			type="xsd:string" minOccurs="0" maxOccurs="unbounded">
            		</xsd:element>
            	</xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="createListFromIdsResult">
            	<xsd:sequence>
            		<xsd:element
            			name="resultcode"
            			type="xsd:string">
                        <xsd:annotation>
                        	<xsd:documentation>        'success' : operation successful
	'warning' : operation successful, however at least one pkey was skipped
        'failure' : unexpected failure
        'invalidsession' : sessionid invalid or expired
        'invalidparam' : invalid parameter
        'unauthorized' : user is not authorized to perform action on these parameters
</xsd:documentation>
                        </xsd:annotation>
            		</xsd:element>
            		<xsd:element
            			name="resultdescription"
            			type="xsd:string">
                        <xsd:annotation>
                        	<xsd:documentation>if not success, contains the reason for error
</xsd:documentation>
                        </xsd:annotation>
            		</xsd:element>
            		<xsd:element
            			name="listid"
            			type="xsd:int">
                        <xsd:annotation>
                        	<xsd:documentation>unique identifier of list just created
</xsd:documentation>
                        </xsd:annotation>
            		</xsd:element>
            		<xsd:element
            			name="numpeople"
            			type="xsd:int">
                        <xsd:annotation>
                        	<xsd:documentation>number of people added to the list.  This may not match the number of pkeys in the method input parameter. invalid ids are skipped.
</xsd:documentation>
                        </xsd:annotation>
            		</xsd:element>
            	</xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="deleteListResult">
            	<xsd:sequence>
            		<xsd:element
            			name="resultcode"
            			type="xsd:string">
                        <xsd:annotation>
                        	<xsd:documentation>        'success' : operation successful
        'failure' : unexpected failure
        'invalidsession' : sessionid invalid or expired
        'invalidparam' : invalid parameter
        'unauthorized' : user is not authorized to perform action on these parameters
</xsd:documentation></xsd:annotation>
            		</xsd:element>
            		<xsd:element
            			name="resultdescription"
            			type="xsd:string">
                        <xsd:annotation>
                        	<xsd:documentation>if not success, contains the reason for error
</xsd:documentation>
                        </xsd:annotation>
            		</xsd:element>
            	</xsd:sequence>
            </xsd:complexType>
</xsd:schema></wsdl:types>
    <wsdl:message name="loginRequest">
    	<wsdl:part name="loginname" type="xsd:string">
    		<wsdl:documentation>loginname (or username) to login as</wsdl:documentation></wsdl:part>
    	<wsdl:part name="password" type="xsd:string">
    		<wsdl:documentation>the user's password</wsdl:documentation></wsdl:part>
    </wsdl:message>
    <wsdl:message name="loginResponse">
    	<wsdl:part name="result" type="sm:loginResult"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="getListsRequest">
    	<wsdl:part name="sessionid" type="xsd:string">
    		<wsdl:documentation>the session identifier</wsdl:documentation></wsdl:part>
    </wsdl:message>
    <wsdl:message name="getListsResponse">
    	<wsdl:part name="result" type="sm:getListsResult"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="getMessagesRequest">
    	<wsdl:part name="sessionid" type="xsd:string">
    		<wsdl:documentation>the session identifier</wsdl:documentation></wsdl:part>
    	<wsdl:part name="type" type="xsd:string"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="getMessagesResponse">
    	<wsdl:part name="result" type="sm:getMessagesResult"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="setMessageBodyRequest">
    	<wsdl:part name="sessionid" type="xsd:string">
    		<wsdl:documentation></wsdl:documentation></wsdl:part>
    	<wsdl:part name="messageid" type="xsd:int"></wsdl:part>
    	<wsdl:part name="messagetext" type="xsd:string"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="setMessageBodyResponse">
    	<wsdl:part name="result" type="sm:setMessagebodyResult"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="uploadAudioRequest">
    	<wsdl:part name="sessionid" type="xsd:string">
    		<wsdl:documentation></wsdl:documentation></wsdl:part>
    	<wsdl:part name="name" type="xsd:string"></wsdl:part>
    	<wsdl:part name="audio" type="xsd:string"></wsdl:part>
    	<wsdl:part name="mimetype" type="xsd:string"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="uploadAudioResponse">
    	<wsdl:part name="result" type="sm:uploadAudioResult"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="getJobTypesRequest">
    	<wsdl:part name="sessionid" type="xsd:string">
    		<wsdl:documentation></wsdl:documentation></wsdl:part>
    </wsdl:message>
    <wsdl:message name="getJobTypesResponse">
    	<wsdl:part name="result" type="sm:getJobTypesResult"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="getActiveJobsRequest">
    	<wsdl:part name="sessionid" type="xsd:string">
    		<wsdl:documentation></wsdl:documentation></wsdl:part>
    </wsdl:message>
    <wsdl:message name="getActiveJobsResponse">
    	<wsdl:part name="result" type="sm:getActiveJobsResult"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="getRepeatingJobsRequest">
    	<wsdl:part name="sessionid" type="xsd:string">
    		<wsdl:documentation></wsdl:documentation></wsdl:part>
    </wsdl:message>
    <wsdl:message name="getRepeatingJobsResponse">
    	<wsdl:part name="result" type="sm:getRepeatingJobsResult"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="sendRepeatingJobRequest">
    	<wsdl:part name="sessionid" type="xsd:string">
    		<wsdl:documentation></wsdl:documentation></wsdl:part>
    	<wsdl:part name="jobid" type="xsd:int"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="sendRepeatingJobResponse">
    	<wsdl:part name="result" type="sm:sendJobResult"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="getJobStatusRequest">
    	<wsdl:part name="sessionid" type="xsd:string">
    		<wsdl:documentation></wsdl:documentation></wsdl:part>
    	<wsdl:part name="jobid" type="xsd:int"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="getJobStatusResponse">
    	<wsdl:part name="result" type="sm:getJobStatusResult"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="sendJobRequest">
    	<wsdl:part name="sessionid" type="xsd:string">
    		<wsdl:documentation>this session identifier</wsdl:documentation></wsdl:part>
    	<wsdl:part name="name" type="xsd:string">
    		<wsdl:documentation>name of the job</wsdl:documentation></wsdl:part>
    	<wsdl:part name="description" type="xsd:string">
    		<wsdl:documentation>description of the job</wsdl:documentation></wsdl:part>
    	<wsdl:part name="listid" type="xsd:int">
    		<wsdl:documentation>list identifier</wsdl:documentation></wsdl:part>
    	<wsdl:part name="jobtypeid" type="xsd:int">
    		<wsdl:documentation>job type identifier</wsdl:documentation></wsdl:part>
        <wsdl:part name="startdate" type="xsd:string">
        	<wsdl:documentation>date to start this job</wsdl:documentation></wsdl:part>
        <wsdl:part name="starttime" type="xsd:string"></wsdl:part>
        <wsdl:part name="endtime" type="xsd:string"></wsdl:part>
        <wsdl:part name="daystorun" type="xsd:int"></wsdl:part>
        <wsdl:part name="phonemsgid" type="xsd:int"></wsdl:part>
        <wsdl:part name="emailmsgid" type="xsd:int"></wsdl:part>
    	<wsdl:part name="smsmsgid" type="xsd:int"></wsdl:part>

    	
    	<wsdl:part name="maxcallattempts" type="xsd:int"></wsdl:part></wsdl:message>
    <wsdl:message name="sendJobResponse">
    	<wsdl:part name="result" type="sm:sendJobResult"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="Request">
    	<wsdl:part name="Request" type="xsd:string"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="Response">
    	<wsdl:part name="Response" type="xsd:string"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="getContactsRequest">
    	<wsdl:part name="sessionid" type="xsd:string">
    		<wsdl:documentation></wsdl:documentation></wsdl:part>
    	<wsdl:part name="pkey" type="xsd:string"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="getContactsResponse">
    	<wsdl:part name="result" type="sm:getContactsResult"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="setContactRequest">
    	<wsdl:part name="sessionid" type="xsd:string">
    		<wsdl:documentation></wsdl:documentation></wsdl:part>
    	<wsdl:part name="contacts" type="sm:Contact"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="setContactResponse">
    	<wsdl:part name="result" type="sm:setContactsResult"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="getCustomerURLRequest">
    	<wsdl:part name="oem" type="xsd:string"></wsdl:part>
    	<wsdl:part name="oemid" type="xsd:string"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="getCustomerURLResponse">
    	<wsdl:part name="result" type="sm:getCustomerURLResult"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="loginToCustomerRequest">
    	<wsdl:part name="loginname" type="xsd:string"></wsdl:part>
    	<wsdl:part name="password" type="xsd:string"></wsdl:part>
    	<wsdl:part name="customerurl" type="xsd:string"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="loginToCustomerResponse">
    	<wsdl:part name="result" type="sm:loginToCustomerResult"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="getLabelsRequest">
    	<wsdl:part name="sessionid" type="xsd:string">
    		<wsdl:documentation></wsdl:documentation></wsdl:part>
    	<wsdl:part name="type" type="xsd:string">
    		<wsdl:documentation>'phone', 'email', 'sms'</wsdl:documentation></wsdl:part>
    </wsdl:message>
    <wsdl:message name="getLabelsResponse">
    	<wsdl:part name="result" type="sm:getLabelsResult"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="getSurveyJobTypesRequest">
    	<wsdl:part name="sessionid" type="xsd:string">
    		<wsdl:documentation></wsdl:documentation></wsdl:part>
    </wsdl:message>
    <wsdl:message name="getSurveyJobTypesResponse">
    	<wsdl:part name="result" type="sm:getJobTypesResult"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="createEmailMessageRequest">
    	<wsdl:part name="sessionid" type="xsd:string">
    		<wsdl:documentation>this session identifier</wsdl:documentation></wsdl:part>
        <wsdl:part name="name" type="xsd:string">
        	<wsdl:documentation>required. max 50 char</wsdl:documentation></wsdl:part>
        <wsdl:part name="description" type="xsd:string">
        	<wsdl:documentation>optional. max 50 char</wsdl:documentation></wsdl:part>
        <wsdl:part name="messagetext" type="xsd:string">
        	<wsdl:documentation>body of the message</wsdl:documentation></wsdl:part>
        <wsdl:part name="subject" type="xsd:string">
        	<wsdl:documentation>optional subject</wsdl:documentation></wsdl:part>
    	<wsdl:part name="fromname" type="xsd:string">
    		<wsdl:documentation>optional</wsdl:documentation></wsdl:part>
    	<wsdl:part name="fromemail" type="xsd:string">
    		<wsdl:documentation>required. must be valid email address format</wsdl:documentation></wsdl:part>
    </wsdl:message>
    <wsdl:message name="createEmailMessageResponse">
    	<wsdl:part name="result" type="sm:createMessageResult">
    	</wsdl:part>
    </wsdl:message>
    <wsdl:message name="createPhoneMessageRequest">
    	<wsdl:part name="sessionid" type="xsd:string">
    		<wsdl:documentation>this session identifier</wsdl:documentation></wsdl:part>
    	<wsdl:part name="name" type="xsd:string">
    		<wsdl:documentation>required. max 50 char</wsdl:documentation></wsdl:part>
    	<wsdl:part name="description" type="xsd:string">
    		<wsdl:documentation>optional. max 50 char</wsdl:documentation></wsdl:part>
    	<wsdl:part name="messagetext" type="xsd:string">
    		<wsdl:documentation>required. message parts parsed from text</wsdl:documentation></wsdl:part>
    	<wsdl:part name="ttsgender" type="xsd:string">
    		<wsdl:documentation>optional.text-to-speech voice gender is 'female' unless 'male' is specified (default is 'female')</wsdl:documentation></wsdl:part>
    </wsdl:message>
    <wsdl:message name="createPhoneMessageResponse">
    	<wsdl:part name="result" type="sm:createMessageResult"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="createSmsMessageRequest">
    	<wsdl:part name="sessionid" type="xsd:string">
    		<wsdl:documentation></wsdl:documentation></wsdl:part>
    	<wsdl:part name="name" type="xsd:string">
    		<wsdl:documentation>required. max 50 char</wsdl:documentation></wsdl:part>
    	<wsdl:part name="description" type="xsd:string">
    		<wsdl:documentation>optional max 50 char</wsdl:documentation></wsdl:part>
    	<wsdl:part name="messagetext" type="xsd:string">
    		<wsdl:documentation>required. max 160 char</wsdl:documentation></wsdl:part>
    </wsdl:message>
    <wsdl:message name="createSmsMessageResponse">
    	<wsdl:part name="result" type="sm:createMessageResult"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="sendJobExtendedRequest">
    	<wsdl:part name="sessionid" type="xsd:string">
    		<wsdl:documentation>this session identifier</wsdl:documentation></wsdl:part>
    	<wsdl:part name="name" type="xsd:string">
    		<wsdl:documentation>required. max chars 50</wsdl:documentation></wsdl:part>
    	<wsdl:part name="description" type="xsd:string">
    		<wsdl:documentation>optional. max chars 50
</wsdl:documentation></wsdl:part>
    	<wsdl:part name="listids" type="sm:listids">
    		<wsdl:documentation>array of list identifiers (one or more)</wsdl:documentation></wsdl:part>
    	<wsdl:part name="jobtypeid" type="xsd:int">
    		<wsdl:documentation>job type identifier</wsdl:documentation></wsdl:part>
    	<wsdl:part name="startdate" type="xsd:string">
    		<wsdl:documentation>date to start job, format YYYY-MM-DD</wsdl:documentation></wsdl:part>
    	<wsdl:part name="starttime" type="xsd:string">
    		<wsdl:documentation>time of day to start job, format HH:MM:SS</wsdl:documentation></wsdl:part>
    	<wsdl:part name="endtime" type="xsd:string">
    		<wsdl:documentation>time of day to stop/pause job, format HH:MM:SS</wsdl:documentation></wsdl:part>
    	<wsdl:part name="daystorun" type="xsd:int">
    		<wsdl:documentation>number of days to run.  minimum 1, max depends on user's profile setting</wsdl:documentation></wsdl:part>
    	<wsdl:part name="phonemessageid" type="xsd:int">
    		<wsdl:documentation>message identifier for phone message, optional but at least phone, email, or sms must be set
</wsdl:documentation></wsdl:part>
    	<wsdl:part name="emailmessageid" type="xsd:int">
    		<wsdl:documentation>message identifier for email message, optional but at least phone, email, or sms must be set</wsdl:documentation></wsdl:part>
    	<wsdl:part name="smsmessageid" type="xsd:int">
    		<wsdl:documentation>message identifier for sm message, optional but at least phone, email, or sms must be set</wsdl:documentation></wsdl:part>
    	<wsdl:part name="maxcallattempts" type="xsd:int">
    		<wsdl:documentation>number of attempts to call each phone number.  minimum 1, maximum set by user's profile</wsdl:documentation></wsdl:part>
    	<wsdl:part name="options" type="sm:jobOptions">
    		<wsdl:documentation>Any of the following options may be used, zero, one or more, if missing an option the default is used.

callerid: the callerid to use.
leavemessage: true/false, alows recipients to press zero to leave a message.
messageconfirmation: true/false, allows recipients to press  '1' for 'yes' and '2' for 'no'.
sendreport: true/false, sends an report when the job is finished.
</wsdl:documentation></wsdl:part>
    </wsdl:message>
    <wsdl:message name="sendJobExtendedResponse">
    	<wsdl:part name="result" type="sm:sendJobResult"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="setContactDestinationRequest">
    	<wsdl:part name="sessionid" type="xsd:string">
    		<wsdl:documentation></wsdl:documentation></wsdl:part>
    	<wsdl:part name="pkey" type="xsd:string">
    		<wsdl:documentation>unique person identifier - max 255 character</wsdl:documentation></wsdl:part>
    	<wsdl:part name="type" type="xsd:string">
    		<wsdl:documentation>type of destination to set values are 'phone', 'email', 'sms'</wsdl:documentation></wsdl:part>
    	<wsdl:part name="sequence" type="xsd:int">
    		<wsdl:documentation>which destination sequence to set '0', '1', '2', ... max depends on the number configured for your account</wsdl:documentation></wsdl:part>
    	<wsdl:part name="destination" type="xsd:string">
    		<wsdl:documentation>the contact destination, could be a valid phone number or email address

max 20 characters for type 'phone'
max 100 characters for type 'email'
max 20 characters for type 'sms'
</wsdl:documentation></wsdl:part>
    	<wsdl:part name="editlock" type="xsd:boolean">
    		<wsdl:documentation>'true' to lock the contact data - imports do not overwrite this destination
'false' to unlock the contact data - imports may overwrite</wsdl:documentation></wsdl:part>
    </wsdl:message>
    <wsdl:message name="setContactDestinationResponse">
    	<wsdl:part name="result"
    		type="sm:setContactDestinationResult">
    	</wsdl:part>
    </wsdl:message>
    <wsdl:message name="setContactPreferenceRequest">
    	<wsdl:part name="sessionid" type="xsd:string">
    		<wsdl:documentation> session identifier</wsdl:documentation></wsdl:part>
    	<wsdl:part name="pkey" type="xsd:string">
    		<wsdl:documentation>person unique identifier</wsdl:documentation></wsdl:part>
    	<wsdl:part name="type" type="xsd:string">
    		<wsdl:documentation>either 'phone', 'email', or 'sms</wsdl:documentation></wsdl:part>
    	<wsdl:part name="sequence" type="xsd:int">
    		<wsdl:documentation>sequence of destination, begins with 0 (0, 1, 2, ...)</wsdl:documentation></wsdl:part>
    	<wsdl:part name="jobtypeid" type="xsd:int">
    		<wsdl:documentation>jobtype identifier</wsdl:documentation></wsdl:part>
    	<wsdl:part name="enabled" type="xsd:boolean">
    		<wsdl:documentation>'true' if the destination should be contacted for this job type, 'false' otherwise</wsdl:documentation></wsdl:part>
    </wsdl:message>
    <wsdl:message name="setContactPreferenceResponse">
    	<wsdl:part name="result" type="sm:setContactPreferenceResult"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="getPermissionsRequest">
    	<wsdl:part name="sessionid" type="xsd:string">
    		<wsdl:documentation></wsdl:documentation></wsdl:part>
    </wsdl:message>
    <wsdl:message name="getPermissionsResponse">
    	<wsdl:part name="result" type="sm:getPermissionsResult"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="getSettingsRequest">
    	<wsdl:part name="sessionid" type="xsd:string">
    		<wsdl:documentation></wsdl:documentation></wsdl:part>
    </wsdl:message>
    <wsdl:message name="getSettingsResponse">
    	<wsdl:part name="result" type="sm:getSettingsResult"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="getImportsRequest">
    	<wsdl:part
    		name="sessionid"
    		type="xsd:string">
    		<wsdl:documentation></wsdl:documentation>
    	</wsdl:part>
    </wsdl:message>
    <wsdl:message name="getImportsResponse">
    	<wsdl:part
    		name="getImportsResponse"
    		type="sm:getImportsResult">
    	</wsdl:part>
    </wsdl:message>
    <wsdl:message name="uploadImportRequest">
    	<wsdl:part
    		name="sessionid"
    		type="xsd:string">
    		<wsdl:documentation>this session identifier</wsdl:documentation>
    	</wsdl:part>
    	<wsdl:part
    		name="importid"
    		type="xsd:int">
    		<wsdl:documentation>unique identifier of import to upload data for</wsdl:documentation>
    	</wsdl:part>
    	<wsdl:part
    		name="base64data"
    		type="xsd:string">
    		<wsdl:documentation>base64 encoded data</wsdl:documentation>
    	</wsdl:part>
    </wsdl:message>
    <wsdl:message name="uploadImportResponse">
    	<wsdl:part
    		name="result"
    		type="sm:uploadImportResult">
    	</wsdl:part>
    </wsdl:message>
    <wsdl:message name="runImportRequest">
    	<wsdl:part
    		name="sessionid"
    		type="xsd:string">
    		<wsdl:documentation>this session identifier</wsdl:documentation>
    	</wsdl:part>
    	<wsdl:part
    		name="importid"
    		type="xsd:int">
    		<wsdl:documentation>unique identifier of import to run</wsdl:documentation>
    	</wsdl:part>
    </wsdl:message>
    <wsdl:message name="runImportResponse">
    	<wsdl:part
    		name="result"
    		type="sm:runImportResult">
    	</wsdl:part>
    </wsdl:message>
    <wsdl:message name="getImportDetailRequest">
    	<wsdl:part
    		name="sessionid"
    		type="xsd:string">
    		<wsdl:documentation>this session identifier</wsdl:documentation>
    	</wsdl:part>
    	<wsdl:part
    		name="importid"
    		type="xsd:int">
    		<wsdl:documentation>unique identifier of import to get details about</wsdl:documentation>
    	</wsdl:part>
    </wsdl:message>
    <wsdl:message name="getImportDetailResponse">
    	<wsdl:part
    		name="result"
    		type="sm:getImportDetailResult">
    	</wsdl:part>
    </wsdl:message>
    <wsdl:message name="createListFromIdsRequest">
    	<wsdl:part
    		name="sessionid"
    		type="xsd:string">
    		<wsdl:documentation>this session identifier</wsdl:documentation>
    	</wsdl:part>
    	<wsdl:part
    		name="name"
    		type="xsd:string">
    		<wsdl:documentation>name of list</wsdl:documentation>
    	</wsdl:part>
    	<wsdl:part
    		name="description"
    		type="xsd:string">
    		<wsdl:documentation>description of list</wsdl:documentation>
    	</wsdl:part>
    	<wsdl:part
    		name="pkeys"
    		type="sm:pkeys">
    		<wsdl:documentation>array of pkeys - a 'pkey' is the person unique identifier</wsdl:documentation>
    	</wsdl:part>
    </wsdl:message>
    <wsdl:message name="createListFromIdsResponse">
    	<wsdl:part
    		name="result"
    		type="sm:createListFromIdsResult">
    	</wsdl:part>
    </wsdl:message>
    <wsdl:message name="deleteListRequest">
    	<wsdl:part
    		name="sessionid"
    		type="xsd:string">
    		<wsdl:documentation>this session identifier</wsdl:documentation>
    	</wsdl:part>
    	<wsdl:part
    		name="listid"
    		type="xsd:int">
    		<wsdl:documentation>unique identifier of list to delete</wsdl:documentation>
    	</wsdl:part>
    </wsdl:message>
    <wsdl:message name="deleteListResponse">
    	<wsdl:part
    		name="result"
    		type="sm:deleteListResult">
    	</wsdl:part>
    </wsdl:message>
    <wsdl:portType name="SMClient">
    	<wsdl:operation name="login">
    		<wsdl:documentation>Given a valid loginname/password, a session id is generated and passed back.
</wsdl:documentation>
    		<wsdl:input message="sm:loginRequest"></wsdl:input>
    		<wsdl:output message="sm:loginResponse"></wsdl:output>
        </wsdl:operation>
    	<wsdl:operation name="getLists">
    		<wsdl:documentation>Given a valid sessionid, an array of lists will be returned for this session's user.
</wsdl:documentation>
    		<wsdl:input message="sm:getListsRequest"></wsdl:input>
    		<wsdl:output message="sm:getListsResponse"></wsdl:output>
        </wsdl:operation>
    	<wsdl:operation name="getMessages">
    		<wsdl:documentation>Given a valid sessionid and a valid message type, an array of messages will be returned for this session's user.
If error occurs, error will contain error string and messages will not be set.

Valid messages types are:
	phone
	email
	sms

getMessages:
	params: string sessionid, string message type
	returns:
		messages: array of messages
		error: string
</wsdl:documentation>
    		<wsdl:input message="sm:getMessagesRequest"></wsdl:input>
    		<wsdl:output message="sm:getMessagesResponse"></wsdl:output>
        </wsdl:operation>
    	<wsdl:operation name="setMessageBody">
    		<wsdl:documentation>Given a valid sessionid, messageid and message text, the specified message
will have its text replaced.  If successful, result will be true.
If error occurs, error will contain error string and result will be false.

setMessageBody:
	params: string sessionid, int message id, string message text
	returns: boolean result, string error
</wsdl:documentation>
    		<wsdl:input message="sm:setMessageBodyRequest"></wsdl:input>
    		<wsdl:output message="sm:setMessageBodyResponse"></wsdl:output>
        </wsdl:operation>
    	<wsdl:operation name="uploadAudio">
    		<wsdl:documentation>Given a valid sessionid, name, mimetype, and audio file,
an audio file record will be generated and its resulting
name returned.
If an error occurs, error will contain the error string and audioname will be empty.
mimetype must be one of the following:
'audio/wav' for .wav files
'audio/mpeg' for .mp3 files
'audio/x-caf' for .caf files

IMPORTANT: the audio data should be a base64 encoded string

uploadAudio:
	params: string sessionid, string name, string mimetype, base64 encoded string audio
	return:
		audioname: string
		error: string
</wsdl:documentation>
    		<wsdl:input message="sm:uploadAudioRequest"></wsdl:input>
    		<wsdl:output message="sm:uploadAudioResponse"></wsdl:output>
        </wsdl:operation>
    	<wsdl:operation name="getJobTypes">
    		<wsdl:documentation>Given a valid sessionid, an array of jobtypes will be returned.
If an error occurs, error will contain the error string and jobtypes will not be set.

getJobTypes:
	params: string sessionid
	return:
		jobtypes: array of jobtypes
		error: string
</wsdl:documentation>
    		<wsdl:input message="sm:getJobTypesRequest"></wsdl:input>
    		<wsdl:output message="sm:getJobTypesResponse"></wsdl:output>
        </wsdl:operation>
    	<wsdl:operation name="getActiveJobs">
    		<wsdl:documentation>Given a valid sessionid, an array of jobs will be returned.
If an error occurs, error will contain the error string and jobs will not be set.

getActiveJobs:
params: string sessionid
return:
	jobs: array of job objects
	error: string
</wsdl:documentation>
    		<wsdl:input message="sm:getActiveJobsRequest"></wsdl:input>
    		<wsdl:output message="sm:getActiveJobsResponse"></wsdl:output>
        </wsdl:operation>
    	<wsdl:operation name="getRepeatingJobs">
    		<wsdl:documentation>Given a valid sessionid, an array of jobs will be returned.
If an error occurs, error will contain the error string and jobs will not be set.

getRepeatingJobs:
	params: string sessionid
	return:
		jobs: array of job objects
		error: string
</wsdl:documentation>
    		<wsdl:input message="sm:getRepeatingJobsRequest"></wsdl:input>
    		<wsdl:output message="sm:getRepeatingJobsResponse"></wsdl:output>
        </wsdl:operation>
    	<wsdl:operation name="sendRepeatingJob">
    		<wsdl:documentation>Given a valid sessionid and jobid, the active job\'s id will be returned
If an error occurs, error will contain the error string and jobid will be 0.

sendRepeatingJob:
	params: string sessionid
	return: int jobid, string error
</wsdl:documentation>
    		<wsdl:input message="sm:sendRepeatingJobRequest"></wsdl:input>
    		<wsdl:output message="sm:sendRepeatingJobResponse"></wsdl:output>
    	</wsdl:operation>
    	<wsdl:operation name="getJobStatus">
    		<wsdl:documentation>Given a valid sessionid and jobid, a single job will be returned.
If an error occurs, error will contain the error string and job will not be set.

getJobStatus:
	params: string sessionid
	return:
		job: a job object,
		error: string</wsdl:documentation>
    		<wsdl:input message="sm:getJobStatusRequest"></wsdl:input>
    		<wsdl:output message="sm:getJobStatusResponse"></wsdl:output>
    	</wsdl:operation>
    	<wsdl:operation name="sendJob">
    		<wsdl:documentation>Given a valid sessionid, name, description, listid, jobtypeid,
startdate, starttime, endtime, number of days to run, optional phone message id,
optional email id, optional sms message id, and max call attempts,
a job will be created and set to active.  The job id will be returned.
If an error occurs, error will contain the error string and jobid will be 0.

sendJob:
	params: string sessionid
			string name
			string description
			int listid
			int jobtypeid
			string startdate
			string starttime
			string endtime
			int number of days to run
			int phone message id
			int email message id
			int sms message id
			int max call attempts
	return: int jobid, string error
</wsdl:documentation>
    		<wsdl:input message="sm:sendJobRequest"></wsdl:input>
    		<wsdl:output message="sm:sendJobResponse"></wsdl:output>
    	</wsdl:operation>

    	<wsdl:operation name="getContacts">
    		<wsdl:documentation>Given a valid session id and pkey, an array of contact objects is returned.
		A contact object contains a pkey, contact type(phone,email,sms), sequence number,
		contact information, and an array of contact preference objects.  A contact
		preference object contains a job type id and an enabled flag(boolean).

		The max number of contacts are always returned.

		getContacts
			params: String sessionid
					String pkey

			return:
					contacts: array of contact objs</wsdl:documentation>
    		<wsdl:input message="sm:getContactsRequest"></wsdl:input>
    		<wsdl:output message="sm:getContactsResponse"></wsdl:output>
    	</wsdl:operation>
    	<wsdl:operation name="setContact">
    		<wsdl:documentation>		Given a valid session id and a contact object,
		setContact will update contact information in the system.  If any
		part of the contact object is invalid, an error is returned

		setContacts
			params: String sessionid
					contact: contact object

			return:
					Success/Fail</wsdl:documentation>
    		<wsdl:input message="sm:setContactRequest"></wsdl:input>
    		<wsdl:output message="sm:setContactResponse"></wsdl:output>
    	</wsdl:operation>
    	<wsdl:operation name="getCustomerURL">
    		<wsdl:documentation>	Given a valid oem/oemid combination, the customer url corresponding to the
	matching customer is returned

	getCustomerUrl:
		params: string oem, string oemid
		returns: string customerurl</wsdl:documentation>
    		<wsdl:input message="sm:getCustomerURLRequest"></wsdl:input>
    		<wsdl:output message="sm:getCustomerURLResponse"></wsdl:output>
    	</wsdl:operation>
    	<wsdl:operation name="loginToCustomer">
    		<wsdl:documentation>	Given a valid loginname/password/customerurl combination, a session id is generated and passed back.
	If an error occurs, error will contain the error and sessionid will be empty string.

	loginToCustomer:
		params: string loginname, string password, string customerurl
		returns: string resultcode, string resultdescription, string sessionid</wsdl:documentation>
    		<wsdl:input message="sm:loginToCustomerRequest"></wsdl:input>
    		<wsdl:output message="sm:loginToCustomerResponse"></wsdl:output>
    	</wsdl:operation>
    	<wsdl:operation name="getLabels">
    		<wsdl:documentation>Given a valid sessionid and type, an array of labels will be returned.
Valid types are phone, email and sms.
If an error occurs, error will contain the error string and labels will not be set.

getLabels:
	params: string sessionid,string type
	return:
		labels: array of labeltypes
		error: string</wsdl:documentation>
    		<wsdl:input message="sm:getLabelsRequest"></wsdl:input>
    		<wsdl:output message="sm:getLabelsResponse"></wsdl:output>
    	</wsdl:operation>
    	<wsdl:operation name="getSurveyJobTypes">
    		<wsdl:documentation>Similar to getJobType however all types are surveys.
Given a valid sessionid, an array of jobtypes will be returned.
If an error occurs, error will contain the error string and jobtypes will not be set.

getJobTypes:
	params: string sessionid
	return:
		jobtypes: array of jobtypes
		error: string</wsdl:documentation>
    		<wsdl:input message="sm:getSurveyJobTypesRequest"></wsdl:input>
    		<wsdl:output message="sm:getSurveyJobTypesResponse"></wsdl:output>
    	</wsdl:operation>
    	<wsdl:operation name="createEmailMessage">
    		<wsdl:documentation> Create an Email message, English language is assumed</wsdl:documentation>
    		<wsdl:input message="sm:createEmailMessageRequest"></wsdl:input>
    		<wsdl:output message="sm:createEmailMessageResponse"></wsdl:output>
    	</wsdl:operation>
    	<wsdl:operation name="createPhoneMessage">
    		<wsdl:documentation>Create a Phone message, text used in text-to-speech. English is the language assumed (but may specify the voice gender)</wsdl:documentation>
    		<wsdl:input message="sm:createPhoneMessageRequest"></wsdl:input>
    		<wsdl:output message="sm:createPhoneMessageResponse"></wsdl:output>
    	</wsdl:operation>
    	<wsdl:operation name="createSmsMessage">
    		<wsdl:documentation>Create a new SMS message, English is the language assumed.</wsdl:documentation>
    		<wsdl:input message="sm:createSmsMessageRequest"></wsdl:input>
    		<wsdl:output message="sm:createSmsMessageResponse"></wsdl:output>
    	</wsdl:operation>
    	<wsdl:operation name="sendJobExtended">
    		<wsdl:documentation>Create and Submit a new Job.
Like sendJob() with additional parameters.</wsdl:documentation>
    		<wsdl:input message="sm:sendJobExtendedRequest"></wsdl:input>
    		<wsdl:output message="sm:sendJobExtendedResponse"></wsdl:output>
    	</wsdl:operation>
    	<wsdl:operation name="setContactDestination">
    		<wsdl:documentation>update a contact destination (phone/email/sms)
params:
    string sessionid : this session id
    string pkey : person unique identifier
    string type : 'phone', 'email', 'sms'
    int sequence : 0, 1, 2, ...
    string destination : either the phone number or email address to set
    boolean editlock : true if the destination should not be overwritten by data imports, false otherwise
returns:
   string resultcode : 'success' , 'invalidparam', 'unauthorized', 'failure'
   string resultdescription : reason for failure
</wsdl:documentation>
    		<wsdl:input message="sm:setContactDestinationRequest"></wsdl:input>
    		<wsdl:output message="sm:setContactDestinationResponse"></wsdl:output>
    	</wsdl:operation>
    	<wsdl:operation name="setContactPreference">
    		<wsdl:documentation>Specify whether or not a contact destination should receive messages for the given job type.
</wsdl:documentation>
    		<wsdl:input message="sm:setContactPreferenceRequest"></wsdl:input>
    		<wsdl:output message="sm:setContactPreferenceResponse"></wsdl:output>
    	</wsdl:operation>
    	<wsdl:operation name="getPermissions">
    		<wsdl:documentation>Find this user's permissions. Use to determine functionality available to them.
</wsdl:documentation>
    		<wsdl:input message="sm:getPermissionsRequest"></wsdl:input>
    		<wsdl:output message="sm:getPermissionsResponse"></wsdl:output>
    	</wsdl:operation>
    	<wsdl:operation name="getSettings">
    		<wsdl:documentation>Find this user's settings.  se to determine user preferences and other customer settings.</wsdl:documentation>
    		<wsdl:input message="sm:getSettingsRequest"></wsdl:input>
    		<wsdl:output message="sm:getSettingsResponse"></wsdl:output>
    	</wsdl:operation>
    	<wsdl:operation name="getImports">
    		<wsdl:documentation>Returns a list of system imports with status and other data.</wsdl:documentation>
    		<wsdl:input message="sm:getImportsRequest"></wsdl:input>
    		<wsdl:output message="sm:getImportsResponse"></wsdl:output>
    	</wsdl:operation>
    	<wsdl:operation name="uploadImport">
    		<wsdl:documentation>Uploads the base64 encoded data to the specified import.</wsdl:documentation>
    		<wsdl:input message="sm:uploadImportRequest"></wsdl:input>
    		<wsdl:output message="sm:uploadImportResponse"></wsdl:output>
    	</wsdl:operation>
    	<wsdl:operation name="runImport">
    		<wsdl:documentation>Causes the specified import to be queued for execution</wsdl:documentation>
    		<wsdl:input message="sm:runImportRequest"></wsdl:input>
    		<wsdl:output message="sm:runImportResponse"></wsdl:output>
    	</wsdl:operation>
    	<wsdl:operation name="getImportDetail">
    		<wsdl:documentation>Gets data about an import as well as associated log entries.</wsdl:documentation>
    		<wsdl:input message="sm:getImportDetailRequest"></wsdl:input>
    		<wsdl:output message="sm:getImportDetailResponse"></wsdl:output>
    	</wsdl:operation>
    	<wsdl:operation name="createListFromIds">
    		<wsdl:documentation>Creates a new list and adds entries for each person authorized from the list of pkeys.  A 'pkey' is the unique id of the person. If the pkey is not found or not authorized, it is skipped. Results contain the number of people added.</wsdl:documentation>
    		<wsdl:input message="sm:createListFromIdsRequest"></wsdl:input>
    		<wsdl:output message="sm:createListFromIdsResponse"></wsdl:output>
    	</wsdl:operation>
    	<wsdl:operation name="deleteList">
    		<wsdl:documentation>Marks a list for deletion, causing it to be soft-deleted. It may still be referenced, but won't be visible in the UI, and will be deleted during periodic mantainance. Does not modify the list contents.</wsdl:documentation>
    		<wsdl:input message="sm:deleteListRequest"></wsdl:input>
    		<wsdl:output message="sm:deleteListResponse"></wsdl:output>
    	</wsdl:operation></wsdl:portType>
    <wsdl:binding name="SMBinding" type="sm:SMClient">

    	<soap:binding style="rpc"
    		transport="http://schemas.xmlsoap.org/soap/http" />
    	<wsdl:operation name="login">

    		<soap:operation
    			soapAction="http://asp.schoolmessenger.com/login"></soap:operation>
    		<wsdl:input>

    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com"></soap:body>
    		</wsdl:input>
    		<wsdl:output>

    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com"></soap:body>
    		</wsdl:output>

    	</wsdl:operation>
    	<wsdl:operation name="getLists">

    		<soap:operation
    			soapAction="http://asp.schoolmessenger.com/getLists"></soap:operation>
    		<wsdl:input>

    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com"></soap:body>
    		</wsdl:input>
    		<wsdl:output>

    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com"></soap:body>
    		</wsdl:output>

    	</wsdl:operation>
    	<wsdl:operation name="getMessages">

    		<soap:operation
    			soapAction="http://asp.schoolmessenger.com/getMessages"></soap:operation>
    		<wsdl:input>

    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com"></soap:body>
    		</wsdl:input>
    		<wsdl:output>

    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com"></soap:body>
    		</wsdl:output>

    	</wsdl:operation>
    	<wsdl:operation name="setMessageBody">

    		<soap:operation
    			soapAction="http://asp.schoolmessenger.com/setMessageBody"></soap:operation>
    		<wsdl:input>

    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com"></soap:body>
    		</wsdl:input>
    		<wsdl:output>

    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com"></soap:body>
    		</wsdl:output>

    	</wsdl:operation>
    	<wsdl:operation name="uploadAudio">

    		<soap:operation
    			soapAction="http://asp.schoolmessenger.com/uploadAudio"></soap:operation>
    		<wsdl:input>

    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com"></soap:body>
    		</wsdl:input>
    		<wsdl:output>

    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com"></soap:body>
    		</wsdl:output>

    	</wsdl:operation>
    	<wsdl:operation name="getJobTypes">

    		<soap:operation
    			soapAction="http://asp.schoolmessenger.com/getJobTypes"></soap:operation>
    		<wsdl:input>

    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com"></soap:body>
    		</wsdl:input>
    		<wsdl:output>

    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com"></soap:body>
    		</wsdl:output>

    	</wsdl:operation>
    	<wsdl:operation name="getActiveJobs">

    		<soap:operation
    			soapAction="http://asp.schoolmessenger.com/getActiveJobs"></soap:operation>
    		<wsdl:input>

    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com"></soap:body>
    		</wsdl:input>
    		<wsdl:output>

    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com"></soap:body>
    		</wsdl:output>

    	</wsdl:operation>
    	<wsdl:operation name="getRepeatingJobs">

    		<soap:operation
    			soapAction="http://asp.schoolmessenger.com/getRepeatingJobs"></soap:operation>
    		<wsdl:input>

    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com"></soap:body>
    		</wsdl:input>
    		<wsdl:output>

    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com"></soap:body>
    		</wsdl:output>

    	</wsdl:operation>
    	<wsdl:operation name="sendRepeatingJob">

    		<soap:operation
    			soapAction="http://asp.schoolmessenger.com/sendRepeatingJob"></soap:operation>
    		<wsdl:input>

    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com"></soap:body>
    		</wsdl:input>
    		<wsdl:output>

    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com"></soap:body>
    		</wsdl:output>
    	</wsdl:operation>
    	<wsdl:operation name="getJobStatus">

    		<soap:operation
    			soapAction="http://asp.schoolmessenger.com/getJobStatus"></soap:operation>
    		<wsdl:input>

    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com"></soap:body>
    		</wsdl:input>
    		<wsdl:output>

    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com"></soap:body>
    		</wsdl:output>
    	</wsdl:operation>
    	<wsdl:operation name="sendJob">

    		<soap:operation
    			soapAction="http://asp.schoolmessenger.com/sendJob"></soap:operation>
    		<wsdl:input>

    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com" />
    		</wsdl:input>
    		<wsdl:output>

    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com"></soap:body>
    		</wsdl:output>
    	</wsdl:operation>

    	<wsdl:operation name="getContacts">

    		<soap:operation
    			soapAction="http://asp.schoolmessenger.com/getContacts"></soap:operation>
    		<wsdl:input>

    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com"></soap:body>
    		</wsdl:input>
    		<wsdl:output>

    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com"></soap:body>
    		</wsdl:output>
    	</wsdl:operation>
    	<wsdl:operation name="setContact">

    		<soap:operation
    			soapAction="http://asp.schoolmessenger.com/setContact"></soap:operation>
    		<wsdl:input>

    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com"></soap:body>
    		</wsdl:input>
    		<wsdl:output>

    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com"></soap:body>
    		</wsdl:output>
    	</wsdl:operation>
    	<wsdl:operation name="getCustomerURL">

    		<soap:operation
    			soapAction="http://asp.schoolmessenger.com/getCustomerURL"></soap:operation>
    		<wsdl:input>

    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com"></soap:body>
    		</wsdl:input>
    		<wsdl:output>

    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com"></soap:body>
    		</wsdl:output>
    	</wsdl:operation>
    	<wsdl:operation name="loginToCustomer">
    		<soap:operation
    			soapAction="http://asp.schoolmessenger.com/loginToCustomer"></soap:operation>
    		<wsdl:input>
    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com"></soap:body>
    		</wsdl:input>
    		<wsdl:output>
    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com"></soap:body>
    		</wsdl:output>
    	</wsdl:operation>
    	<wsdl:operation name="getLabels">
    		<soap:operation
    			soapAction="http://asp.schoolmessenger.com/getLabels"></soap:operation>
    		<wsdl:input>
    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com"></soap:body>
    		</wsdl:input>
    		<wsdl:output>
    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com"></soap:body>
    		</wsdl:output>
    	</wsdl:operation>
    	<wsdl:operation name="getSurveyJobTypes">
    		<soap:operation
    			soapAction="http://asp.schoolmessenger.com/getSurveyJobTypes"></soap:operation>
    		<wsdl:input>
    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com"></soap:body>
    		</wsdl:input>
    		<wsdl:output>
    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com"></soap:body>
    		</wsdl:output>
    	</wsdl:operation>
    	<wsdl:operation name="createEmailMessage">
    		<soap:operation
    			soapAction="http://asp.schoolmessenger.com/createEmailMessage"></soap:operation>
    		<wsdl:input>
    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com"></soap:body>
    		</wsdl:input>
    		<wsdl:output>
    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com"></soap:body>
    		</wsdl:output>
    	</wsdl:operation>
    	<wsdl:operation name="createPhoneMessage">
    		<soap:operation
    			soapAction="http://asp.schoolmessenger.com/createPhoneMessage"></soap:operation>
    		<wsdl:input>
    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com"></soap:body>
    		</wsdl:input>
    		<wsdl:output>
    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com"></soap:body>
    		</wsdl:output>
    	</wsdl:operation>
    	<wsdl:operation name="createSmsMessage">
    		<soap:operation
    			soapAction="http://asp.schoolmessenger.com/createSmsMessage"></soap:operation>
    		<wsdl:input>
    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com"></soap:body>
    		</wsdl:input>
    		<wsdl:output>
    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com"></soap:body>
    		</wsdl:output>
    	</wsdl:operation>
    	<wsdl:operation name="sendJobExtended">
    		<soap:operation
    			soapAction="http://asp.schoolmessenger.com/sendJobExtended"></soap:operation>
    		<wsdl:input>
    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com"></soap:body>
    		</wsdl:input>
    		<wsdl:output>
    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com"></soap:body>
    		</wsdl:output>
    	</wsdl:operation>
    	<wsdl:operation name="setContactDestination">
    		<soap:operation
    			soapAction="http://asp.schoolmessenger.com/setContactDestination"></soap:operation>
    		<wsdl:input>
    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com"></soap:body>
    		</wsdl:input>
    		<wsdl:output>
    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com"></soap:body>
    		</wsdl:output>
    	</wsdl:operation>
    	<wsdl:operation name="setContactPreference">
    		<soap:operation
    			soapAction="http://asp.schoolmessenger.com/setContactPreference"></soap:operation>
    		<wsdl:input>
    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com"></soap:body>
    		</wsdl:input>
    		<wsdl:output>
    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com"></soap:body>
    		</wsdl:output>
    	</wsdl:operation>
    	<wsdl:operation name="getPermissions">
    		<soap:operation
    			soapAction="http://asp.schoolmessenger.com/getPermissions"></soap:operation>
    		<wsdl:input>
    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com"></soap:body>
    		</wsdl:input>
    		<wsdl:output>
    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com"></soap:body>
    		</wsdl:output>
    	</wsdl:operation>
    	<wsdl:operation name="getSettings">
    		<soap:operation
    			soapAction="http://asp.schoolmessenger.com/getSettings"></soap:operation>
    		<wsdl:input>
    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com"></soap:body>
    		</wsdl:input>
    		<wsdl:output>
    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com"></soap:body>
    		</wsdl:output>
    	</wsdl:operation>
    	<wsdl:operation name="getImports">
    		<soap:operation
    			soapAction="http://asp.schoolmessenger.com/getImports" />
    		<wsdl:input>
    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com" />
    		</wsdl:input>
    		<wsdl:output>
    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com" />
    		</wsdl:output>
    	</wsdl:operation>
    	<wsdl:operation name="uploadImport">
    		<soap:operation
    			soapAction="http://asp.schoolmessenger.com/uploadImport" />
    		<wsdl:input>
    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com" />
    		</wsdl:input>
    		<wsdl:output>
    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com" />
    		</wsdl:output>
    	</wsdl:operation>
    	<wsdl:operation name="runImport">
    		<soap:operation
    			soapAction="http://asp.schoolmessenger.com/runImport" />
    		<wsdl:input>
    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com" />
    		</wsdl:input>
    		<wsdl:output>
    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com" />
    		</wsdl:output>
    	</wsdl:operation>
    	<wsdl:operation name="getImportDetail">
    		<soap:operation
    			soapAction="http://asp.schoolmessenger.com/getImportDetail" />
    		<wsdl:input>
    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com" />
    		</wsdl:input>
    		<wsdl:output>
    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com" />
    		</wsdl:output>
    	</wsdl:operation>
    	<wsdl:operation name="createListFromIds">
    		<soap:operation
    			soapAction="http://asp.schoolmessenger.com/createListFromIds" />
    		<wsdl:input>
    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com" />
    		</wsdl:input>
    		<wsdl:output>
    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com" />
    		</wsdl:output>
    	</wsdl:operation>
    	<wsdl:operation name="deleteList">
    		<soap:operation
    			soapAction="http://asp.schoolmessenger.com/deleteList" />
    		<wsdl:input>
    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com" />
    		</wsdl:input>
    		<wsdl:output>
    			<soap:body use="literal"
    				namespace="http://asp.schoolmessenger.com" />
    		</wsdl:output>
    	</wsdl:operation>
    </wsdl:binding>

    <wsdl:service name="SMAPI">
		<wsdl:port name="SMAPIPort" binding="sm:SMBinding">
			<soap:address location="smapiurl"></soap:address>
		</wsdl:port>
	</wsdl:service></wsdl:definitions>
