<?xml version="1.0"?>
<!-- Cecil Test -->
<project name="kona" default="dist">

    <property name="src.dir" location="." />
    <property name="dist.dir" location="dist" />
    <property name="build.txt.dir" location="." />
    <property name="build.txt.file" location="${build.txt.dir}/build.txt" />

    <target name="init">
        <!-- Create the date stamp for the zip file filename -->
        <tstamp>
            <format property="file.suffix.date" pattern="yyyy-MM-dd" />
        </tstamp>
        <!-- Create the build directory structure used by compile -->
        <mkdir dir="${dist.dir}" />
    </target>

    <!-- START build.txt calculation / file creation -->

    <!-- make sure the folder is under Git version control -->
    <available file=".git" type="dir" property="git.present" />

    <!-- create the time/date stamp used in build.txt-->
    <target name="build.txt.date.init">
        <!-- Create the time stamp -->
        <tstamp>
            <format property="build.date" pattern="yyyy-MM-dd HH:mm:ss" />
        </tstamp>
    </target>

    <!-- determine the tag name, if it is a tag -->
    <target name="git.calc.tag.name" if="git.present">
        <exec executable="git" outputproperty="git.tag" failifexecutionfails="false"
              errorproperty="git.tag.error">
            <arg value="describe" />
            <arg value="--exact-match" />
            <arg value="HEAD" />
        </exec>
        <echo message="git.tag = ${git.tag}" />
        <!--  is.not.tag - a "negative" property, but false results don't set the property, so
              is.tag = false isn't an option -->
        <condition property="git.is.not.tag">
            <contains string="${git.tag.error}" substring="fatal: no tag exactly matches" />
        </condition>
        <condition property="git.is.tag">
            <or>
                <equals arg1="${git.tag.error}" arg2="" />
                <not>
                    <isset property="git.tag.error" />
                </not>

            </or>
        </condition>
    </target>

    <!-- determine the short version of the hash -->
    <target name="git.calc.shorthash" if="git.present">
        <exec executable="git" outputproperty="git.shorthash" failifexecutionfails="true"
              errorproperty="git.shorthash.error">
            <arg value="log" />
            <arg value="-n1" />
            <arg value="--pretty=%h" />
        </exec>
        <echo message="shorthash = ${git.shorthash}" />
    </target>

    <!-- determine the branch name -->
    <target name="git.calc.branch.name" if="git.present">
        <exec executable="git" outputproperty="git.branch" failifexecutionfails="false"
              errorproperty="git.branch.error">
            <arg value="rev-parse" />
            <arg value="--symbolic-full-name" />
            <arg value="--abbrev-ref" />
            <arg value="HEAD" />
        </exec>
        <echo message="branch = ${git.branch}" />
    </target>

    <!-- determine how git would describe this build -->
    <target name="git.calc.describe" if="git.present">
        <exec executable="git" outputproperty="git.describe" failifexecutionfails="false"
              errorproperty="git.describe.error">
            <arg value="describe" />
            <arg value="--tags" />
            <arg value="--always" />
            <arg value="HEAD" />
        </exec>
        <echo message="git-describe = ${git.describe}" />
        <!--<echo message="git-describe.error = ${git.describe.error}" />-->
    </target>

    <!-- create build.txt and write the build date into it -->
    <target name="build.date" depends="build.txt.date.init" if="git.present">
        <echo message="build.date=${build.date}${line.separator}" />
        <echo file="${build.txt.file}" message="build.date=${build.date}${line.separator}" />
    </target>

    <!-- write a formatted build.tag into build.txt, if the "tag" is based on a branch -->
    <target name="format.build.tag.from.branch" depends="git.calc.describe, git.calc.branch.name, git.calc.tag.name"
            if="git.is.not.tag">
        <echo message="build.tag=${git.branch}/${git.describe}${line.separator}" />
        <echo file="${build.txt.file}" append="true"
              message="build.tag=${git.branch}/${git.describe}${line.separator}" />
    </target>

    <!-- write a formatted build.tag into build.txt, if the "tag" is based on a tag -->
    <target name="format.build.tag.from.tag" depends="git.calc.tag.name, git.calc.shorthash" if="git.is.tag">
        <echo message="build.tag=${git.tag} (${git.shorthash})${line.separator}" />
        <echo file="${build.txt.file}" append="true"
              message="build.tag=${git.tag} (${git.shorthash})${line.separator}" />
    </target>

    <!-- create build.txt -->
    <target name="build.txt" depends="build.date, format.build.tag.from.branch, format.build.tag.from.tag" />

    <!-- END build.txt calculation / file creation -->

    <!-- create kona-{date}.zip file -->
    <target name="dist" depends="clean, init, build.txt">
        <zip destfile="${dist.dir}/kona-${file.suffix.date}.zip">
            <zipfileset dir="." prefix="kona/">
                <!-- the files related to creating the zip file -->
                <exclude name="dist/" />
                <exclude name="build.xml" />

                <!-- all settings files that shouldn't be included -->
                <exclude name="**/*settings.ini.php" />

                <!-- extra files/folders currently in kona folder not for distribution -->
                <exclude name="test.php" />
                <exclude name="testjobtask.php" />
                <exclude name="_template.php" />
                <exclude name="changelog.txt" />
                <exclude name="test/" />
                <exclude name="originals/" />

                <!-- hidden files/folders (including .project) -->
                <exclude name="**/.g*" />
                <exclude name="**/.g*/" />
                <exclude name="**/.p*" />
                <exclude name="**/.p*/" />    

                <!-- IntelliJ project-related files -->
                <exclude name="**/*.eml" />
                <exclude name="**/*.iml" />
            </zipfileset>
        </zip>
    </target>


    <target name="clean">
    		<echo message="dist.dir = ${dist.dir}" />
        <delete dir="${dist.dir}" />
        <delete file="${build.txt.file}" />
    </target>

</project>