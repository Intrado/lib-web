<?php
namespace commsuite;
/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Exception\TApplicationException;


interface CommSuiteIf {
  public function emailMessagePreviewForPriority($sessionid, $messageid, $jobpriority);
  public function emailMessageViewForJobPerson($sessionid, $messageid, $jobid, $personid);
  public function emailMessageViewForMessageParts($sessionid, \commsuite\MessageDTO $message, $parts, $jobpriority);
  public function audioFileGetForFormat($sessionid, $contentid, $format);
  public function ttsGetForTextLanguageGenderNameFormat($text, $language, $gender, $name, $format);
  public function phoneMessageGetMp3AudioFile($sessionid, $parts);
  public function processIncomingSms($smsParams);
  public function generateFeed($urlcomponent, $categoryIds, $maxPost, $maxDays);
  public function expireFeedCategories($urlcomponent, $categoryIds);
  public function customerIdLookupForUrl($urlcomponent);
  public function attachmentGet($sessionid, $attachmentId, $personId);
  public function contentGet($sessionid, $contentId);
  public function contentGetForCustomerId($customerid, $contentid);
  public function contentPut($sessionid, \commsuite\FileData $content);
  public function contentPutForCustomerId($customerid, \commsuite\FileData $content);
  public function contentDelete($sessionid, $contentid);
  public function contentDeleteForCustomerId($customerid, $contentid);
}

class CommSuiteClient implements \commsuite\CommSuiteIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function emailMessagePreviewForPriority($sessionid, $messageid, $jobpriority)
  {
    $this->send_emailMessagePreviewForPriority($sessionid, $messageid, $jobpriority);
    return $this->recv_emailMessagePreviewForPriority();
  }

  public function send_emailMessagePreviewForPriority($sessionid, $messageid, $jobpriority)
  {
    $args = new \commsuite\CommSuite_emailMessagePreviewForPriority_args();
    $args->sessionid = $sessionid;
    $args->messageid = $messageid;
    $args->jobpriority = $jobpriority;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'emailMessagePreviewForPriority', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('emailMessagePreviewForPriority', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_emailMessagePreviewForPriority()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\commsuite\CommSuite_emailMessagePreviewForPriority_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \commsuite\CommSuite_emailMessagePreviewForPriority_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sie !== null) {
      throw $result->sie;
    }
    throw new \Exception("emailMessagePreviewForPriority failed: unknown result");
  }

  public function emailMessageViewForJobPerson($sessionid, $messageid, $jobid, $personid)
  {
    $this->send_emailMessageViewForJobPerson($sessionid, $messageid, $jobid, $personid);
    return $this->recv_emailMessageViewForJobPerson();
  }

  public function send_emailMessageViewForJobPerson($sessionid, $messageid, $jobid, $personid)
  {
    $args = new \commsuite\CommSuite_emailMessageViewForJobPerson_args();
    $args->sessionid = $sessionid;
    $args->messageid = $messageid;
    $args->jobid = $jobid;
    $args->personid = $personid;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'emailMessageViewForJobPerson', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('emailMessageViewForJobPerson', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_emailMessageViewForJobPerson()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\commsuite\CommSuite_emailMessageViewForJobPerson_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \commsuite\CommSuite_emailMessageViewForJobPerson_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sie !== null) {
      throw $result->sie;
    }
    throw new \Exception("emailMessageViewForJobPerson failed: unknown result");
  }

  public function emailMessageViewForMessageParts($sessionid, \commsuite\MessageDTO $message, $parts, $jobpriority)
  {
    $this->send_emailMessageViewForMessageParts($sessionid, $message, $parts, $jobpriority);
    return $this->recv_emailMessageViewForMessageParts();
  }

  public function send_emailMessageViewForMessageParts($sessionid, \commsuite\MessageDTO $message, $parts, $jobpriority)
  {
    $args = new \commsuite\CommSuite_emailMessageViewForMessageParts_args();
    $args->sessionid = $sessionid;
    $args->message = $message;
    $args->parts = $parts;
    $args->jobpriority = $jobpriority;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'emailMessageViewForMessageParts', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('emailMessageViewForMessageParts', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_emailMessageViewForMessageParts()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\commsuite\CommSuite_emailMessageViewForMessageParts_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \commsuite\CommSuite_emailMessageViewForMessageParts_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sie !== null) {
      throw $result->sie;
    }
    throw new \Exception("emailMessageViewForMessageParts failed: unknown result");
  }

  public function audioFileGetForFormat($sessionid, $contentid, $format)
  {
    $this->send_audioFileGetForFormat($sessionid, $contentid, $format);
    return $this->recv_audioFileGetForFormat();
  }

  public function send_audioFileGetForFormat($sessionid, $contentid, $format)
  {
    $args = new \commsuite\CommSuite_audioFileGetForFormat_args();
    $args->sessionid = $sessionid;
    $args->contentid = $contentid;
    $args->format = $format;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'audioFileGetForFormat', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('audioFileGetForFormat', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_audioFileGetForFormat()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\commsuite\CommSuite_audioFileGetForFormat_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \commsuite\CommSuite_audioFileGetForFormat_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sie !== null) {
      throw $result->sie;
    }
    if ($result->nfe !== null) {
      throw $result->nfe;
    }
    throw new \Exception("audioFileGetForFormat failed: unknown result");
  }

  public function ttsGetForTextLanguageGenderNameFormat($text, $language, $gender, $name, $format)
  {
    $this->send_ttsGetForTextLanguageGenderNameFormat($text, $language, $gender, $name, $format);
    return $this->recv_ttsGetForTextLanguageGenderNameFormat();
  }

  public function send_ttsGetForTextLanguageGenderNameFormat($text, $language, $gender, $name, $format)
  {
    $args = new \commsuite\CommSuite_ttsGetForTextLanguageGenderNameFormat_args();
    $args->text = $text;
    $args->language = $language;
    $args->gender = $gender;
    $args->name = $name;
    $args->format = $format;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ttsGetForTextLanguageGenderNameFormat', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ttsGetForTextLanguageGenderNameFormat', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ttsGetForTextLanguageGenderNameFormat()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\commsuite\CommSuite_ttsGetForTextLanguageGenderNameFormat_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \commsuite\CommSuite_ttsGetForTextLanguageGenderNameFormat_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->nfe !== null) {
      throw $result->nfe;
    }
    throw new \Exception("ttsGetForTextLanguageGenderNameFormat failed: unknown result");
  }

  public function phoneMessageGetMp3AudioFile($sessionid, $parts)
  {
    $this->send_phoneMessageGetMp3AudioFile($sessionid, $parts);
    return $this->recv_phoneMessageGetMp3AudioFile();
  }

  public function send_phoneMessageGetMp3AudioFile($sessionid, $parts)
  {
    $args = new \commsuite\CommSuite_phoneMessageGetMp3AudioFile_args();
    $args->sessionid = $sessionid;
    $args->parts = $parts;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'phoneMessageGetMp3AudioFile', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('phoneMessageGetMp3AudioFile', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_phoneMessageGetMp3AudioFile()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\commsuite\CommSuite_phoneMessageGetMp3AudioFile_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \commsuite\CommSuite_phoneMessageGetMp3AudioFile_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->sie !== null) {
      throw $result->sie;
    }
    if ($result->nfe !== null) {
      throw $result->nfe;
    }
    throw new \Exception("phoneMessageGetMp3AudioFile failed: unknown result");
  }

  public function processIncomingSms($smsParams)
  {
    $this->send_processIncomingSms($smsParams);
    $this->recv_processIncomingSms();
  }

  public function send_processIncomingSms($smsParams)
  {
    $args = new \commsuite\CommSuite_processIncomingSms_args();
    $args->smsParams = $smsParams;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'processIncomingSms', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('processIncomingSms', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_processIncomingSms()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\commsuite\CommSuite_processIncomingSms_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \commsuite\CommSuite_processIncomingSms_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    return;
  }

  public function generateFeed($urlcomponent, $categoryIds, $maxPost, $maxDays)
  {
    $this->send_generateFeed($urlcomponent, $categoryIds, $maxPost, $maxDays);
    return $this->recv_generateFeed();
  }

  public function send_generateFeed($urlcomponent, $categoryIds, $maxPost, $maxDays)
  {
    $args = new \commsuite\CommSuite_generateFeed_args();
    $args->urlcomponent = $urlcomponent;
    $args->categoryIds = $categoryIds;
    $args->maxPost = $maxPost;
    $args->maxDays = $maxDays;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'generateFeed', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('generateFeed', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_generateFeed()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\commsuite\CommSuite_generateFeed_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \commsuite\CommSuite_generateFeed_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->nfe !== null) {
      throw $result->nfe;
    }
    if ($result->nae !== null) {
      throw $result->nae;
    }
    throw new \Exception("generateFeed failed: unknown result");
  }

  public function expireFeedCategories($urlcomponent, $categoryIds)
  {
    $this->send_expireFeedCategories($urlcomponent, $categoryIds);
  }

  public function send_expireFeedCategories($urlcomponent, $categoryIds)
  {
    $args = new \commsuite\CommSuite_expireFeedCategories_args();
    $args->urlcomponent = $urlcomponent;
    $args->categoryIds = $categoryIds;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'expireFeedCategories', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('expireFeedCategories', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function customerIdLookupForUrl($urlcomponent)
  {
    $this->send_customerIdLookupForUrl($urlcomponent);
    return $this->recv_customerIdLookupForUrl();
  }

  public function send_customerIdLookupForUrl($urlcomponent)
  {
    $args = new \commsuite\CommSuite_customerIdLookupForUrl_args();
    $args->urlcomponent = $urlcomponent;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'customerIdLookupForUrl', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('customerIdLookupForUrl', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_customerIdLookupForUrl()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\commsuite\CommSuite_customerIdLookupForUrl_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \commsuite\CommSuite_customerIdLookupForUrl_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->nfe !== null) {
      throw $result->nfe;
    }
    throw new \Exception("customerIdLookupForUrl failed: unknown result");
  }

  public function attachmentGet($sessionid, $attachmentId, $personId)
  {
    $this->send_attachmentGet($sessionid, $attachmentId, $personId);
    return $this->recv_attachmentGet();
  }

  public function send_attachmentGet($sessionid, $attachmentId, $personId)
  {
    $args = new \commsuite\CommSuite_attachmentGet_args();
    $args->sessionid = $sessionid;
    $args->attachmentId = $attachmentId;
    $args->personId = $personId;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'attachmentGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('attachmentGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_attachmentGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\commsuite\CommSuite_attachmentGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \commsuite\CommSuite_attachmentGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->nfe !== null) {
      throw $result->nfe;
    }
    if ($result->nae !== null) {
      throw $result->nae;
    }
    if ($result->sie !== null) {
      throw $result->sie;
    }
    throw new \Exception("attachmentGet failed: unknown result");
  }

  public function contentGet($sessionid, $contentId)
  {
    $this->send_contentGet($sessionid, $contentId);
    return $this->recv_contentGet();
  }

  public function send_contentGet($sessionid, $contentId)
  {
    $args = new \commsuite\CommSuite_contentGet_args();
    $args->sessionid = $sessionid;
    $args->contentId = $contentId;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'contentGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('contentGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_contentGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\commsuite\CommSuite_contentGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \commsuite\CommSuite_contentGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->nfe !== null) {
      throw $result->nfe;
    }
    if ($result->nae !== null) {
      throw $result->nae;
    }
    if ($result->sie !== null) {
      throw $result->sie;
    }
    throw new \Exception("contentGet failed: unknown result");
  }

  public function contentGetForCustomerId($customerid, $contentid)
  {
    $this->send_contentGetForCustomerId($customerid, $contentid);
    return $this->recv_contentGetForCustomerId();
  }

  public function send_contentGetForCustomerId($customerid, $contentid)
  {
    $args = new \commsuite\CommSuite_contentGetForCustomerId_args();
    $args->customerid = $customerid;
    $args->contentid = $contentid;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'contentGetForCustomerId', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('contentGetForCustomerId', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_contentGetForCustomerId()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\commsuite\CommSuite_contentGetForCustomerId_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \commsuite\CommSuite_contentGetForCustomerId_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->nfe !== null) {
      throw $result->nfe;
    }
    if ($result->nae !== null) {
      throw $result->nae;
    }
    throw new \Exception("contentGetForCustomerId failed: unknown result");
  }

  public function contentPut($sessionid, \commsuite\FileData $content)
  {
    $this->send_contentPut($sessionid, $content);
    return $this->recv_contentPut();
  }

  public function send_contentPut($sessionid, \commsuite\FileData $content)
  {
    $args = new \commsuite\CommSuite_contentPut_args();
    $args->sessionid = $sessionid;
    $args->content = $content;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'contentPut', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('contentPut', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_contentPut()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\commsuite\CommSuite_contentPut_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \commsuite\CommSuite_contentPut_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->nae !== null) {
      throw $result->nae;
    }
    if ($result->sie !== null) {
      throw $result->sie;
    }
    throw new \Exception("contentPut failed: unknown result");
  }

  public function contentPutForCustomerId($customerid, \commsuite\FileData $content)
  {
    $this->send_contentPutForCustomerId($customerid, $content);
    return $this->recv_contentPutForCustomerId();
  }

  public function send_contentPutForCustomerId($customerid, \commsuite\FileData $content)
  {
    $args = new \commsuite\CommSuite_contentPutForCustomerId_args();
    $args->customerid = $customerid;
    $args->content = $content;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'contentPutForCustomerId', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('contentPutForCustomerId', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_contentPutForCustomerId()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\commsuite\CommSuite_contentPutForCustomerId_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \commsuite\CommSuite_contentPutForCustomerId_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->nae !== null) {
      throw $result->nae;
    }
    throw new \Exception("contentPutForCustomerId failed: unknown result");
  }

  public function contentDelete($sessionid, $contentid)
  {
    $this->send_contentDelete($sessionid, $contentid);
    $this->recv_contentDelete();
  }

  public function send_contentDelete($sessionid, $contentid)
  {
    $args = new \commsuite\CommSuite_contentDelete_args();
    $args->sessionid = $sessionid;
    $args->contentid = $contentid;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'contentDelete', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('contentDelete', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_contentDelete()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\commsuite\CommSuite_contentDelete_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \commsuite\CommSuite_contentDelete_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->nae !== null) {
      throw $result->nae;
    }
    if ($result->sie !== null) {
      throw $result->sie;
    }
    return;
  }

  public function contentDeleteForCustomerId($customerid, $contentid)
  {
    $this->send_contentDeleteForCustomerId($customerid, $contentid);
    $this->recv_contentDeleteForCustomerId();
  }

  public function send_contentDeleteForCustomerId($customerid, $contentid)
  {
    $args = new \commsuite\CommSuite_contentDeleteForCustomerId_args();
    $args->customerid = $customerid;
    $args->contentid = $contentid;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'contentDeleteForCustomerId', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('contentDeleteForCustomerId', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_contentDeleteForCustomerId()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\commsuite\CommSuite_contentDeleteForCustomerId_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \commsuite\CommSuite_contentDeleteForCustomerId_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->nae !== null) {
      throw $result->nae;
    }
    return;
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class CommSuite_emailMessagePreviewForPriority_args {
  static $_TSPEC;

  public $sessionid = null;
  public $messageid = null;
  public $jobpriority = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sessionid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'messageid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'jobpriority',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sessionid'])) {
        $this->sessionid = $vals['sessionid'];
      }
      if (isset($vals['messageid'])) {
        $this->messageid = $vals['messageid'];
      }
      if (isset($vals['jobpriority'])) {
        $this->jobpriority = $vals['jobpriority'];
      }
    }
  }

  public function getName() {
    return 'CommSuite_emailMessagePreviewForPriority_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sessionid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->messageid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->jobpriority);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommSuite_emailMessagePreviewForPriority_args');
    if ($this->sessionid !== null) {
      $xfer += $output->writeFieldBegin('sessionid', TType::STRING, 1);
      $xfer += $output->writeString($this->sessionid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->messageid !== null) {
      $xfer += $output->writeFieldBegin('messageid', TType::I32, 2);
      $xfer += $output->writeI32($this->messageid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jobpriority !== null) {
      $xfer += $output->writeFieldBegin('jobpriority', TType::I32, 3);
      $xfer += $output->writeI32($this->jobpriority);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CommSuite_emailMessagePreviewForPriority_result {
  static $_TSPEC;

  public $success = null;
  public $sie = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\commsuite\EmailMessageView',
          ),
        1 => array(
          'var' => 'sie',
          'type' => TType::STRUCT,
          'class' => '\commsuite\SessionInvalidException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sie'])) {
        $this->sie = $vals['sie'];
      }
    }
  }

  public function getName() {
    return 'CommSuite_emailMessagePreviewForPriority_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \commsuite\EmailMessageView();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sie = new \commsuite\SessionInvalidException();
            $xfer += $this->sie->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommSuite_emailMessagePreviewForPriority_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sie !== null) {
      $xfer += $output->writeFieldBegin('sie', TType::STRUCT, 1);
      $xfer += $this->sie->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CommSuite_emailMessageViewForJobPerson_args {
  static $_TSPEC;

  public $sessionid = null;
  public $messageid = null;
  public $jobid = null;
  public $personid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sessionid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'messageid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'jobid',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'personid',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sessionid'])) {
        $this->sessionid = $vals['sessionid'];
      }
      if (isset($vals['messageid'])) {
        $this->messageid = $vals['messageid'];
      }
      if (isset($vals['jobid'])) {
        $this->jobid = $vals['jobid'];
      }
      if (isset($vals['personid'])) {
        $this->personid = $vals['personid'];
      }
    }
  }

  public function getName() {
    return 'CommSuite_emailMessageViewForJobPerson_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sessionid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->messageid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->jobid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->personid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommSuite_emailMessageViewForJobPerson_args');
    if ($this->sessionid !== null) {
      $xfer += $output->writeFieldBegin('sessionid', TType::STRING, 1);
      $xfer += $output->writeString($this->sessionid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->messageid !== null) {
      $xfer += $output->writeFieldBegin('messageid', TType::I32, 2);
      $xfer += $output->writeI32($this->messageid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jobid !== null) {
      $xfer += $output->writeFieldBegin('jobid', TType::I32, 3);
      $xfer += $output->writeI32($this->jobid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->personid !== null) {
      $xfer += $output->writeFieldBegin('personid', TType::I32, 4);
      $xfer += $output->writeI32($this->personid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CommSuite_emailMessageViewForJobPerson_result {
  static $_TSPEC;

  public $success = null;
  public $sie = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\commsuite\EmailMessageView',
          ),
        1 => array(
          'var' => 'sie',
          'type' => TType::STRUCT,
          'class' => '\commsuite\SessionInvalidException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sie'])) {
        $this->sie = $vals['sie'];
      }
    }
  }

  public function getName() {
    return 'CommSuite_emailMessageViewForJobPerson_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \commsuite\EmailMessageView();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sie = new \commsuite\SessionInvalidException();
            $xfer += $this->sie->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommSuite_emailMessageViewForJobPerson_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sie !== null) {
      $xfer += $output->writeFieldBegin('sie', TType::STRUCT, 1);
      $xfer += $this->sie->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CommSuite_emailMessageViewForMessageParts_args {
  static $_TSPEC;

  public $sessionid = null;
  public $message = null;
  public $parts = null;
  public $jobpriority = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sessionid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRUCT,
          'class' => '\commsuite\MessageDTO',
          ),
        3 => array(
          'var' => 'parts',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\commsuite\MessagePartDTO',
            ),
          ),
        4 => array(
          'var' => 'jobpriority',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sessionid'])) {
        $this->sessionid = $vals['sessionid'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['parts'])) {
        $this->parts = $vals['parts'];
      }
      if (isset($vals['jobpriority'])) {
        $this->jobpriority = $vals['jobpriority'];
      }
    }
  }

  public function getName() {
    return 'CommSuite_emailMessageViewForMessageParts_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sessionid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->message = new \commsuite\MessageDTO();
            $xfer += $this->message->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->parts = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \commsuite\MessagePartDTO();
              $xfer += $elem5->read($input);
              $this->parts []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->jobpriority);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommSuite_emailMessageViewForMessageParts_args');
    if ($this->sessionid !== null) {
      $xfer += $output->writeFieldBegin('sessionid', TType::STRING, 1);
      $xfer += $output->writeString($this->sessionid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      if (!is_object($this->message)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('message', TType::STRUCT, 2);
      $xfer += $this->message->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parts !== null) {
      if (!is_array($this->parts)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('parts', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->parts));
        {
          foreach ($this->parts as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jobpriority !== null) {
      $xfer += $output->writeFieldBegin('jobpriority', TType::I32, 4);
      $xfer += $output->writeI32($this->jobpriority);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CommSuite_emailMessageViewForMessageParts_result {
  static $_TSPEC;

  public $success = null;
  public $sie = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\commsuite\EmailMessageView',
          ),
        1 => array(
          'var' => 'sie',
          'type' => TType::STRUCT,
          'class' => '\commsuite\SessionInvalidException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sie'])) {
        $this->sie = $vals['sie'];
      }
    }
  }

  public function getName() {
    return 'CommSuite_emailMessageViewForMessageParts_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \commsuite\EmailMessageView();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sie = new \commsuite\SessionInvalidException();
            $xfer += $this->sie->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommSuite_emailMessageViewForMessageParts_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sie !== null) {
      $xfer += $output->writeFieldBegin('sie', TType::STRUCT, 1);
      $xfer += $this->sie->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CommSuite_audioFileGetForFormat_args {
  static $_TSPEC;

  public $sessionid = null;
  public $contentid = null;
  public $format = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sessionid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'contentid',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'format',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sessionid'])) {
        $this->sessionid = $vals['sessionid'];
      }
      if (isset($vals['contentid'])) {
        $this->contentid = $vals['contentid'];
      }
      if (isset($vals['format'])) {
        $this->format = $vals['format'];
      }
    }
  }

  public function getName() {
    return 'CommSuite_audioFileGetForFormat_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sessionid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->contentid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->format);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommSuite_audioFileGetForFormat_args');
    if ($this->sessionid !== null) {
      $xfer += $output->writeFieldBegin('sessionid', TType::STRING, 1);
      $xfer += $output->writeString($this->sessionid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contentid !== null) {
      $xfer += $output->writeFieldBegin('contentid', TType::I64, 2);
      $xfer += $output->writeI64($this->contentid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->format !== null) {
      $xfer += $output->writeFieldBegin('format', TType::STRING, 3);
      $xfer += $output->writeString($this->format);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CommSuite_audioFileGetForFormat_result {
  static $_TSPEC;

  public $success = null;
  public $sie = null;
  public $nfe = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\commsuite\FileData',
          ),
        1 => array(
          'var' => 'sie',
          'type' => TType::STRUCT,
          'class' => '\commsuite\SessionInvalidException',
          ),
        2 => array(
          'var' => 'nfe',
          'type' => TType::STRUCT,
          'class' => '\commsuite\NotFoundException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sie'])) {
        $this->sie = $vals['sie'];
      }
      if (isset($vals['nfe'])) {
        $this->nfe = $vals['nfe'];
      }
    }
  }

  public function getName() {
    return 'CommSuite_audioFileGetForFormat_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \commsuite\FileData();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sie = new \commsuite\SessionInvalidException();
            $xfer += $this->sie->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->nfe = new \commsuite\NotFoundException();
            $xfer += $this->nfe->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommSuite_audioFileGetForFormat_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sie !== null) {
      $xfer += $output->writeFieldBegin('sie', TType::STRUCT, 1);
      $xfer += $this->sie->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nfe !== null) {
      $xfer += $output->writeFieldBegin('nfe', TType::STRUCT, 2);
      $xfer += $this->nfe->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CommSuite_ttsGetForTextLanguageGenderNameFormat_args {
  static $_TSPEC;

  public $text = null;
  public $language = null;
  public $gender = null;
  public $name = null;
  public $format = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'text',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'language',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'gender',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'format',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['text'])) {
        $this->text = $vals['text'];
      }
      if (isset($vals['language'])) {
        $this->language = $vals['language'];
      }
      if (isset($vals['gender'])) {
        $this->gender = $vals['gender'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['format'])) {
        $this->format = $vals['format'];
      }
    }
  }

  public function getName() {
    return 'CommSuite_ttsGetForTextLanguageGenderNameFormat_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->text);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->language);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->gender);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->format);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommSuite_ttsGetForTextLanguageGenderNameFormat_args');
    if ($this->text !== null) {
      $xfer += $output->writeFieldBegin('text', TType::STRING, 1);
      $xfer += $output->writeString($this->text);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->language !== null) {
      $xfer += $output->writeFieldBegin('language', TType::STRING, 2);
      $xfer += $output->writeString($this->language);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gender !== null) {
      $xfer += $output->writeFieldBegin('gender', TType::STRING, 3);
      $xfer += $output->writeString($this->gender);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 4);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->format !== null) {
      $xfer += $output->writeFieldBegin('format', TType::STRING, 5);
      $xfer += $output->writeString($this->format);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CommSuite_ttsGetForTextLanguageGenderNameFormat_result {
  static $_TSPEC;

  public $success = null;
  public $nfe = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\commsuite\FileData',
          ),
        1 => array(
          'var' => 'nfe',
          'type' => TType::STRUCT,
          'class' => '\commsuite\NotFoundException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['nfe'])) {
        $this->nfe = $vals['nfe'];
      }
    }
  }

  public function getName() {
    return 'CommSuite_ttsGetForTextLanguageGenderNameFormat_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \commsuite\FileData();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->nfe = new \commsuite\NotFoundException();
            $xfer += $this->nfe->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommSuite_ttsGetForTextLanguageGenderNameFormat_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nfe !== null) {
      $xfer += $output->writeFieldBegin('nfe', TType::STRUCT, 1);
      $xfer += $this->nfe->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CommSuite_phoneMessageGetMp3AudioFile_args {
  static $_TSPEC;

  public $sessionid = null;
  public $parts = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sessionid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parts',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\commsuite\MessagePartDTO',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sessionid'])) {
        $this->sessionid = $vals['sessionid'];
      }
      if (isset($vals['parts'])) {
        $this->parts = $vals['parts'];
      }
    }
  }

  public function getName() {
    return 'CommSuite_phoneMessageGetMp3AudioFile_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sessionid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->parts = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new \commsuite\MessagePartDTO();
              $xfer += $elem12->read($input);
              $this->parts []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommSuite_phoneMessageGetMp3AudioFile_args');
    if ($this->sessionid !== null) {
      $xfer += $output->writeFieldBegin('sessionid', TType::STRING, 1);
      $xfer += $output->writeString($this->sessionid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parts !== null) {
      if (!is_array($this->parts)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('parts', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->parts));
        {
          foreach ($this->parts as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CommSuite_phoneMessageGetMp3AudioFile_result {
  static $_TSPEC;

  public $success = null;
  public $sie = null;
  public $nfe = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\commsuite\FileData',
          ),
        1 => array(
          'var' => 'sie',
          'type' => TType::STRUCT,
          'class' => '\commsuite\SessionInvalidException',
          ),
        2 => array(
          'var' => 'nfe',
          'type' => TType::STRUCT,
          'class' => '\commsuite\NotFoundException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['sie'])) {
        $this->sie = $vals['sie'];
      }
      if (isset($vals['nfe'])) {
        $this->nfe = $vals['nfe'];
      }
    }
  }

  public function getName() {
    return 'CommSuite_phoneMessageGetMp3AudioFile_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \commsuite\FileData();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->sie = new \commsuite\SessionInvalidException();
            $xfer += $this->sie->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->nfe = new \commsuite\NotFoundException();
            $xfer += $this->nfe->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommSuite_phoneMessageGetMp3AudioFile_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sie !== null) {
      $xfer += $output->writeFieldBegin('sie', TType::STRUCT, 1);
      $xfer += $this->sie->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nfe !== null) {
      $xfer += $output->writeFieldBegin('nfe', TType::STRUCT, 2);
      $xfer += $this->nfe->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CommSuite_processIncomingSms_args {
  static $_TSPEC;

  public $smsParams = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'smsParams',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['smsParams'])) {
        $this->smsParams = $vals['smsParams'];
      }
    }
  }

  public function getName() {
    return 'CommSuite_processIncomingSms_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->smsParams = array();
            $_size14 = 0;
            $_ktype15 = 0;
            $_vtype16 = 0;
            $xfer += $input->readMapBegin($_ktype15, $_vtype16, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $key19 = '';
              $val20 = '';
              $xfer += $input->readString($key19);
              $xfer += $input->readString($val20);
              $this->smsParams[$key19] = $val20;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommSuite_processIncomingSms_args');
    if ($this->smsParams !== null) {
      if (!is_array($this->smsParams)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('smsParams', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->smsParams));
        {
          foreach ($this->smsParams as $kiter21 => $viter22)
          {
            $xfer += $output->writeString($kiter21);
            $xfer += $output->writeString($viter22);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CommSuite_processIncomingSms_result {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'CommSuite_processIncomingSms_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommSuite_processIncomingSms_result');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CommSuite_generateFeed_args {
  static $_TSPEC;

  public $urlcomponent = null;
  public $categoryIds = null;
  public $maxPost = null;
  public $maxDays = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'urlcomponent',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'categoryIds',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        3 => array(
          'var' => 'maxPost',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'maxDays',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['urlcomponent'])) {
        $this->urlcomponent = $vals['urlcomponent'];
      }
      if (isset($vals['categoryIds'])) {
        $this->categoryIds = $vals['categoryIds'];
      }
      if (isset($vals['maxPost'])) {
        $this->maxPost = $vals['maxPost'];
      }
      if (isset($vals['maxDays'])) {
        $this->maxDays = $vals['maxDays'];
      }
    }
  }

  public function getName() {
    return 'CommSuite_generateFeed_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->urlcomponent);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->categoryIds = array();
            $_size23 = 0;
            $_etype26 = 0;
            $xfer += $input->readListBegin($_etype26, $_size23);
            for ($_i27 = 0; $_i27 < $_size23; ++$_i27)
            {
              $elem28 = null;
              $xfer += $input->readI32($elem28);
              $this->categoryIds []= $elem28;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->maxPost);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->maxDays);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommSuite_generateFeed_args');
    if ($this->urlcomponent !== null) {
      $xfer += $output->writeFieldBegin('urlcomponent', TType::STRING, 1);
      $xfer += $output->writeString($this->urlcomponent);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->categoryIds !== null) {
      if (!is_array($this->categoryIds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('categoryIds', TType::LST, 2);
      {
        $output->writeListBegin(TType::I32, count($this->categoryIds));
        {
          foreach ($this->categoryIds as $iter29)
          {
            $xfer += $output->writeI32($iter29);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxPost !== null) {
      $xfer += $output->writeFieldBegin('maxPost', TType::I32, 3);
      $xfer += $output->writeI32($this->maxPost);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxDays !== null) {
      $xfer += $output->writeFieldBegin('maxDays', TType::I32, 4);
      $xfer += $output->writeI32($this->maxDays);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CommSuite_generateFeed_result {
  static $_TSPEC;

  public $success = null;
  public $nfe = null;
  public $nae = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'nfe',
          'type' => TType::STRUCT,
          'class' => '\commsuite\NotFoundException',
          ),
        2 => array(
          'var' => 'nae',
          'type' => TType::STRUCT,
          'class' => '\commsuite\NotAvailableException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['nfe'])) {
        $this->nfe = $vals['nfe'];
      }
      if (isset($vals['nae'])) {
        $this->nae = $vals['nae'];
      }
    }
  }

  public function getName() {
    return 'CommSuite_generateFeed_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->nfe = new \commsuite\NotFoundException();
            $xfer += $this->nfe->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->nae = new \commsuite\NotAvailableException();
            $xfer += $this->nae->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommSuite_generateFeed_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nfe !== null) {
      $xfer += $output->writeFieldBegin('nfe', TType::STRUCT, 1);
      $xfer += $this->nfe->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nae !== null) {
      $xfer += $output->writeFieldBegin('nae', TType::STRUCT, 2);
      $xfer += $this->nae->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CommSuite_expireFeedCategories_args {
  static $_TSPEC;

  public $urlcomponent = null;
  public $categoryIds = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'urlcomponent',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'categoryIds',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['urlcomponent'])) {
        $this->urlcomponent = $vals['urlcomponent'];
      }
      if (isset($vals['categoryIds'])) {
        $this->categoryIds = $vals['categoryIds'];
      }
    }
  }

  public function getName() {
    return 'CommSuite_expireFeedCategories_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->urlcomponent);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->categoryIds = array();
            $_size30 = 0;
            $_etype33 = 0;
            $xfer += $input->readListBegin($_etype33, $_size30);
            for ($_i34 = 0; $_i34 < $_size30; ++$_i34)
            {
              $elem35 = null;
              $xfer += $input->readI32($elem35);
              $this->categoryIds []= $elem35;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommSuite_expireFeedCategories_args');
    if ($this->urlcomponent !== null) {
      $xfer += $output->writeFieldBegin('urlcomponent', TType::STRING, 1);
      $xfer += $output->writeString($this->urlcomponent);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->categoryIds !== null) {
      if (!is_array($this->categoryIds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('categoryIds', TType::LST, 2);
      {
        $output->writeListBegin(TType::I32, count($this->categoryIds));
        {
          foreach ($this->categoryIds as $iter36)
          {
            $xfer += $output->writeI32($iter36);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CommSuite_customerIdLookupForUrl_args {
  static $_TSPEC;

  public $urlcomponent = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'urlcomponent',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['urlcomponent'])) {
        $this->urlcomponent = $vals['urlcomponent'];
      }
    }
  }

  public function getName() {
    return 'CommSuite_customerIdLookupForUrl_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->urlcomponent);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommSuite_customerIdLookupForUrl_args');
    if ($this->urlcomponent !== null) {
      $xfer += $output->writeFieldBegin('urlcomponent', TType::STRING, 1);
      $xfer += $output->writeString($this->urlcomponent);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CommSuite_customerIdLookupForUrl_result {
  static $_TSPEC;

  public $success = null;
  public $nfe = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'nfe',
          'type' => TType::STRUCT,
          'class' => '\commsuite\NotFoundException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['nfe'])) {
        $this->nfe = $vals['nfe'];
      }
    }
  }

  public function getName() {
    return 'CommSuite_customerIdLookupForUrl_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->nfe = new \commsuite\NotFoundException();
            $xfer += $this->nfe->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommSuite_customerIdLookupForUrl_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nfe !== null) {
      $xfer += $output->writeFieldBegin('nfe', TType::STRUCT, 1);
      $xfer += $this->nfe->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CommSuite_attachmentGet_args {
  static $_TSPEC;

  public $sessionid = null;
  public $attachmentId = null;
  public $personId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sessionid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'attachmentId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'personId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sessionid'])) {
        $this->sessionid = $vals['sessionid'];
      }
      if (isset($vals['attachmentId'])) {
        $this->attachmentId = $vals['attachmentId'];
      }
      if (isset($vals['personId'])) {
        $this->personId = $vals['personId'];
      }
    }
  }

  public function getName() {
    return 'CommSuite_attachmentGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sessionid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->attachmentId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->personId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommSuite_attachmentGet_args');
    if ($this->sessionid !== null) {
      $xfer += $output->writeFieldBegin('sessionid', TType::STRING, 1);
      $xfer += $output->writeString($this->sessionid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attachmentId !== null) {
      $xfer += $output->writeFieldBegin('attachmentId', TType::I32, 2);
      $xfer += $output->writeI32($this->attachmentId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->personId !== null) {
      $xfer += $output->writeFieldBegin('personId', TType::I32, 3);
      $xfer += $output->writeI32($this->personId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CommSuite_attachmentGet_result {
  static $_TSPEC;

  public $success = null;
  public $nfe = null;
  public $nae = null;
  public $sie = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\commsuite\FileData',
          ),
        1 => array(
          'var' => 'nfe',
          'type' => TType::STRUCT,
          'class' => '\commsuite\NotFoundException',
          ),
        2 => array(
          'var' => 'nae',
          'type' => TType::STRUCT,
          'class' => '\commsuite\NotAvailableException',
          ),
        3 => array(
          'var' => 'sie',
          'type' => TType::STRUCT,
          'class' => '\commsuite\SessionInvalidException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['nfe'])) {
        $this->nfe = $vals['nfe'];
      }
      if (isset($vals['nae'])) {
        $this->nae = $vals['nae'];
      }
      if (isset($vals['sie'])) {
        $this->sie = $vals['sie'];
      }
    }
  }

  public function getName() {
    return 'CommSuite_attachmentGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \commsuite\FileData();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->nfe = new \commsuite\NotFoundException();
            $xfer += $this->nfe->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->nae = new \commsuite\NotAvailableException();
            $xfer += $this->nae->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->sie = new \commsuite\SessionInvalidException();
            $xfer += $this->sie->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommSuite_attachmentGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nfe !== null) {
      $xfer += $output->writeFieldBegin('nfe', TType::STRUCT, 1);
      $xfer += $this->nfe->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nae !== null) {
      $xfer += $output->writeFieldBegin('nae', TType::STRUCT, 2);
      $xfer += $this->nae->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sie !== null) {
      $xfer += $output->writeFieldBegin('sie', TType::STRUCT, 3);
      $xfer += $this->sie->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CommSuite_contentGet_args {
  static $_TSPEC;

  public $sessionid = null;
  public $contentId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sessionid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'contentId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sessionid'])) {
        $this->sessionid = $vals['sessionid'];
      }
      if (isset($vals['contentId'])) {
        $this->contentId = $vals['contentId'];
      }
    }
  }

  public function getName() {
    return 'CommSuite_contentGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sessionid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->contentId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommSuite_contentGet_args');
    if ($this->sessionid !== null) {
      $xfer += $output->writeFieldBegin('sessionid', TType::STRING, 1);
      $xfer += $output->writeString($this->sessionid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contentId !== null) {
      $xfer += $output->writeFieldBegin('contentId', TType::I64, 2);
      $xfer += $output->writeI64($this->contentId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CommSuite_contentGet_result {
  static $_TSPEC;

  public $success = null;
  public $nfe = null;
  public $nae = null;
  public $sie = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\commsuite\FileData',
          ),
        1 => array(
          'var' => 'nfe',
          'type' => TType::STRUCT,
          'class' => '\commsuite\NotFoundException',
          ),
        2 => array(
          'var' => 'nae',
          'type' => TType::STRUCT,
          'class' => '\commsuite\NotAvailableException',
          ),
        3 => array(
          'var' => 'sie',
          'type' => TType::STRUCT,
          'class' => '\commsuite\SessionInvalidException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['nfe'])) {
        $this->nfe = $vals['nfe'];
      }
      if (isset($vals['nae'])) {
        $this->nae = $vals['nae'];
      }
      if (isset($vals['sie'])) {
        $this->sie = $vals['sie'];
      }
    }
  }

  public function getName() {
    return 'CommSuite_contentGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \commsuite\FileData();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->nfe = new \commsuite\NotFoundException();
            $xfer += $this->nfe->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->nae = new \commsuite\NotAvailableException();
            $xfer += $this->nae->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->sie = new \commsuite\SessionInvalidException();
            $xfer += $this->sie->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommSuite_contentGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nfe !== null) {
      $xfer += $output->writeFieldBegin('nfe', TType::STRUCT, 1);
      $xfer += $this->nfe->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nae !== null) {
      $xfer += $output->writeFieldBegin('nae', TType::STRUCT, 2);
      $xfer += $this->nae->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sie !== null) {
      $xfer += $output->writeFieldBegin('sie', TType::STRUCT, 3);
      $xfer += $this->sie->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CommSuite_contentGetForCustomerId_args {
  static $_TSPEC;

  public $customerid = null;
  public $contentid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'customerid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'contentid',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['customerid'])) {
        $this->customerid = $vals['customerid'];
      }
      if (isset($vals['contentid'])) {
        $this->contentid = $vals['contentid'];
      }
    }
  }

  public function getName() {
    return 'CommSuite_contentGetForCustomerId_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->customerid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->contentid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommSuite_contentGetForCustomerId_args');
    if ($this->customerid !== null) {
      $xfer += $output->writeFieldBegin('customerid', TType::I32, 1);
      $xfer += $output->writeI32($this->customerid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contentid !== null) {
      $xfer += $output->writeFieldBegin('contentid', TType::I64, 2);
      $xfer += $output->writeI64($this->contentid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CommSuite_contentGetForCustomerId_result {
  static $_TSPEC;

  public $success = null;
  public $nfe = null;
  public $nae = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\commsuite\FileData',
          ),
        1 => array(
          'var' => 'nfe',
          'type' => TType::STRUCT,
          'class' => '\commsuite\NotFoundException',
          ),
        2 => array(
          'var' => 'nae',
          'type' => TType::STRUCT,
          'class' => '\commsuite\NotAvailableException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['nfe'])) {
        $this->nfe = $vals['nfe'];
      }
      if (isset($vals['nae'])) {
        $this->nae = $vals['nae'];
      }
    }
  }

  public function getName() {
    return 'CommSuite_contentGetForCustomerId_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \commsuite\FileData();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->nfe = new \commsuite\NotFoundException();
            $xfer += $this->nfe->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->nae = new \commsuite\NotAvailableException();
            $xfer += $this->nae->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommSuite_contentGetForCustomerId_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nfe !== null) {
      $xfer += $output->writeFieldBegin('nfe', TType::STRUCT, 1);
      $xfer += $this->nfe->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nae !== null) {
      $xfer += $output->writeFieldBegin('nae', TType::STRUCT, 2);
      $xfer += $this->nae->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CommSuite_contentPut_args {
  static $_TSPEC;

  public $sessionid = null;
  public $content = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sessionid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'content',
          'type' => TType::STRUCT,
          'class' => '\commsuite\FileData',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sessionid'])) {
        $this->sessionid = $vals['sessionid'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
    }
  }

  public function getName() {
    return 'CommSuite_contentPut_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sessionid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->content = new \commsuite\FileData();
            $xfer += $this->content->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommSuite_contentPut_args');
    if ($this->sessionid !== null) {
      $xfer += $output->writeFieldBegin('sessionid', TType::STRING, 1);
      $xfer += $output->writeString($this->sessionid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      if (!is_object($this->content)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('content', TType::STRUCT, 2);
      $xfer += $this->content->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CommSuite_contentPut_result {
  static $_TSPEC;

  public $success = null;
  public $nae = null;
  public $sie = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I64,
          ),
        1 => array(
          'var' => 'nae',
          'type' => TType::STRUCT,
          'class' => '\commsuite\NotAvailableException',
          ),
        2 => array(
          'var' => 'sie',
          'type' => TType::STRUCT,
          'class' => '\commsuite\SessionInvalidException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['nae'])) {
        $this->nae = $vals['nae'];
      }
      if (isset($vals['sie'])) {
        $this->sie = $vals['sie'];
      }
    }
  }

  public function getName() {
    return 'CommSuite_contentPut_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->nae = new \commsuite\NotAvailableException();
            $xfer += $this->nae->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->sie = new \commsuite\SessionInvalidException();
            $xfer += $this->sie->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommSuite_contentPut_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I64, 0);
      $xfer += $output->writeI64($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nae !== null) {
      $xfer += $output->writeFieldBegin('nae', TType::STRUCT, 1);
      $xfer += $this->nae->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sie !== null) {
      $xfer += $output->writeFieldBegin('sie', TType::STRUCT, 2);
      $xfer += $this->sie->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CommSuite_contentPutForCustomerId_args {
  static $_TSPEC;

  public $customerid = null;
  public $content = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'customerid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'content',
          'type' => TType::STRUCT,
          'class' => '\commsuite\FileData',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['customerid'])) {
        $this->customerid = $vals['customerid'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
    }
  }

  public function getName() {
    return 'CommSuite_contentPutForCustomerId_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->customerid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->content = new \commsuite\FileData();
            $xfer += $this->content->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommSuite_contentPutForCustomerId_args');
    if ($this->customerid !== null) {
      $xfer += $output->writeFieldBegin('customerid', TType::I32, 1);
      $xfer += $output->writeI32($this->customerid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      if (!is_object($this->content)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('content', TType::STRUCT, 2);
      $xfer += $this->content->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CommSuite_contentPutForCustomerId_result {
  static $_TSPEC;

  public $success = null;
  public $nae = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I64,
          ),
        1 => array(
          'var' => 'nae',
          'type' => TType::STRUCT,
          'class' => '\commsuite\NotAvailableException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['nae'])) {
        $this->nae = $vals['nae'];
      }
    }
  }

  public function getName() {
    return 'CommSuite_contentPutForCustomerId_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->nae = new \commsuite\NotAvailableException();
            $xfer += $this->nae->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommSuite_contentPutForCustomerId_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I64, 0);
      $xfer += $output->writeI64($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nae !== null) {
      $xfer += $output->writeFieldBegin('nae', TType::STRUCT, 1);
      $xfer += $this->nae->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CommSuite_contentDelete_args {
  static $_TSPEC;

  public $sessionid = null;
  public $contentid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sessionid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'contentid',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sessionid'])) {
        $this->sessionid = $vals['sessionid'];
      }
      if (isset($vals['contentid'])) {
        $this->contentid = $vals['contentid'];
      }
    }
  }

  public function getName() {
    return 'CommSuite_contentDelete_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sessionid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->contentid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommSuite_contentDelete_args');
    if ($this->sessionid !== null) {
      $xfer += $output->writeFieldBegin('sessionid', TType::STRING, 1);
      $xfer += $output->writeString($this->sessionid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contentid !== null) {
      $xfer += $output->writeFieldBegin('contentid', TType::I64, 2);
      $xfer += $output->writeI64($this->contentid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CommSuite_contentDelete_result {
  static $_TSPEC;

  public $nae = null;
  public $sie = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'nae',
          'type' => TType::STRUCT,
          'class' => '\commsuite\NotAvailableException',
          ),
        2 => array(
          'var' => 'sie',
          'type' => TType::STRUCT,
          'class' => '\commsuite\SessionInvalidException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['nae'])) {
        $this->nae = $vals['nae'];
      }
      if (isset($vals['sie'])) {
        $this->sie = $vals['sie'];
      }
    }
  }

  public function getName() {
    return 'CommSuite_contentDelete_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->nae = new \commsuite\NotAvailableException();
            $xfer += $this->nae->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->sie = new \commsuite\SessionInvalidException();
            $xfer += $this->sie->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommSuite_contentDelete_result');
    if ($this->nae !== null) {
      $xfer += $output->writeFieldBegin('nae', TType::STRUCT, 1);
      $xfer += $this->nae->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sie !== null) {
      $xfer += $output->writeFieldBegin('sie', TType::STRUCT, 2);
      $xfer += $this->sie->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CommSuite_contentDeleteForCustomerId_args {
  static $_TSPEC;

  public $customerid = null;
  public $contentid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'customerid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'contentid',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['customerid'])) {
        $this->customerid = $vals['customerid'];
      }
      if (isset($vals['contentid'])) {
        $this->contentid = $vals['contentid'];
      }
    }
  }

  public function getName() {
    return 'CommSuite_contentDeleteForCustomerId_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->customerid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->contentid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommSuite_contentDeleteForCustomerId_args');
    if ($this->customerid !== null) {
      $xfer += $output->writeFieldBegin('customerid', TType::I32, 1);
      $xfer += $output->writeI32($this->customerid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contentid !== null) {
      $xfer += $output->writeFieldBegin('contentid', TType::I64, 2);
      $xfer += $output->writeI64($this->contentid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CommSuite_contentDeleteForCustomerId_result {
  static $_TSPEC;

  public $nae = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'nae',
          'type' => TType::STRUCT,
          'class' => '\commsuite\NotAvailableException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['nae'])) {
        $this->nae = $vals['nae'];
      }
    }
  }

  public function getName() {
    return 'CommSuite_contentDeleteForCustomerId_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->nae = new \commsuite\NotAvailableException();
            $xfer += $this->nae->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommSuite_contentDeleteForCustomerId_result');
    if ($this->nae !== null) {
      $xfer += $output->writeFieldBegin('nae', TType::STRUCT, 1);
      $xfer += $this->nae->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


